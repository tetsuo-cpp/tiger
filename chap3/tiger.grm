%{
#include <stdio.h>
#include "util.h"
#include "errormsg.h"

int yylex(void); /* function prototype */

void yyerror(char *s)
{
 EM_error(EM_tokPos, "%s", s);
}
%}


%union {
	int pos;
	int ival;
	string sval;
	}

%token <sval> ID STRING
%token <ival> INT

%token
  COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK
  LBRACE RBRACE DOT
  PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE
  AND OR ASSIGN
  ARRAY IF THEN ELSE WHILE FOR TO DO LET IN END OF
  BREAK NIL
  FUNCTION VAR TYPE

%right ASSIGN
%left AND OR
%nonassoc EQ NEQ LT LE GT GE
%left PLUS MINUS
%left TIMES DIVIDE
%right UMINUS
%right THEN ELSE DO OF

%debug

%start program

%%

program:	exp
        ;

/* Everything in Tiger is an expression. */
exp:            let
        |       lvalue
        |       lvalue ASSIGN exp
        |       LPAREN exp_list RPAREN
        |       NIL
        |       INT
        |       STRING
        |       MINUS exp %prec UMINUS
        |       exp PLUS exp
        |       exp MINUS exp
        |       exp TIMES exp
        |       exp DIVIDE exp
        |       exp EQ exp
        |       exp NEQ exp
        |       exp LT exp
        |       exp GT exp
        |       exp LE exp
        |       exp GE exp
        |       exp AND exp
        |       exp OR exp
        |       ID LBRACE record_args RBRACE
        |       ID LBRACK exp RBRACK OF exp
        |       if_exp
        |       WHILE exp DO exp
        |       FOR ID ASSIGN exp TO exp DO exp
        |       BREAK
        |       function_call
        ;

/* Let expression. */
let:            LET decl_list IN exp_list END
        ;

decl_list:      decl decl_list
        |
        ;

exp_list:       exp SEMICOLON exp_list
        |       exp
        ;

decl:           type_decl
        |       var_decl
        |       function_decl
        ;

/* Type declarations. */
type_decl:      TYPE ID EQ type

/* The rhs of a type decl. */
type:           ID
        |       LBRACE fields RBRACE
        |       ARRAY OF ID
        ;

/* A series of type fields for when we declare a record. */
fields:         ID COLON ID COMMA fields
        |       ID COLON ID
        ;

/* Variable declaration. */
var_decl:       VAR ID ASSIGN exp
        |       VAR ID COLON ID ASSIGN exp
        ;

/* Function declaration. */
function_decl:  FUNCTION ID LPAREN function_args RPAREN COLON ID EQ exp
        |       FUNCTION ID LPAREN function_args RPAREN EQ exp
        ;

function_args:  function_args_list
        |
        ;

/* Function arguments. */
function_args_list:
                ID COLON ID COMMA function_args_list
        |       ID COLON ID
        ;

lvalue:         ID
        |       lvalue_not_id
        ;

lvalue_not_id:  lvalue DOT ID
        |       ID LBRACK exp RBRACK
        |       lvalue_not_id LBRACK exp RBRACK
        ;

record_args:    ID EQ exp COMMA record_args
        |       ID EQ exp
        ;

if_exp:         IF exp THEN exp
        |       IF exp THEN exp ELSE exp
        ;

function_call:  ID LPAREN function_call_args RPAREN
        |       ID LPAREN RPAREN
        ;

function_call_args:
                exp COMMA function_call_args
        |       exp
        ;
