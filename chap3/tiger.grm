%{
#include <stdio.h>
#include "util.h"
#include "errormsg.h"

int yylex(void); /* function prototype */

void yyerror(char *s)
{
 EM_error(EM_tokPos, "%s", s);
}
%}


%union {
	int pos;
	int ival;
	string sval;
	}

%token <sval> ID STRING
%token <ival> INT

%token
  COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK
  LBRACE RBRACE DOT
  PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE
  AND OR ASSIGN
  ARRAY IF THEN ELSE WHILE FOR TO DO LET IN END OF
  BREAK NIL
  FUNCTION VAR TYPE

%start program

%%

program:	exp
        ;

/* Everything in Tiger is an expression. */
exp:            decl
        ;

/* Type declarations. */
decl:           TYPE ID EQ type
        ;

/* The rhs of a type decl. */
type:           ID
        |       LBRACE fields RBRACE
        |       ARRAY OF ID
        ;

/* A series of type fields for when we declare a record. */
fields:         ID COLON ID fields_rem
        |
        ;

/* The remainder of the fields list must have be comma separated. */
fields_rem:     COMMA ID COLON ID fields_rem
        |
        ;
