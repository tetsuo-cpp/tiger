Terminals which are not used

   LE
   GE
   END


State 1 conflicts: 1 shift/reduce
State 18 conflicts: 10 shift/reduce
State 58 conflicts: 10 shift/reduce
State 59 conflicts: 10 shift/reduce
State 60 conflicts: 10 shift/reduce
State 61 conflicts: 10 shift/reduce
State 62 conflicts: 10 shift/reduce
State 63 conflicts: 10 shift/reduce
State 65 conflicts: 10 shift/reduce
State 67 conflicts: 10 shift/reduce
State 68 conflicts: 10 shift/reduce
State 69 conflicts: 10 shift/reduce
State 72 conflicts: 10 shift/reduce
State 77 conflicts: 10 shift/reduce
State 78 conflicts: 11 shift/reduce
State 79 conflicts: 10 shift/reduce
State 85 conflicts: 1 shift/reduce
State 86 conflicts: 10 shift/reduce
State 87 conflicts: 10 shift/reduce
State 103 conflicts: 10 shift/reduce
State 105 conflicts: 10 shift/reduce
State 124 conflicts: 10 shift/reduce


Grammar

    0 $accept: program $end

    1 program: exp

    2 exp: let
    3    | lvalue
    4    | lvalue ASSIGN exp
    5    | LPAREN exp_list RPAREN
    6    | NIL
    7    | INT
    8    | STRING
    9    | exp PLUS exp
   10    | exp MINUS exp
   11    | exp TIMES exp
   12    | exp DIVIDE exp
   13    | exp EQ exp
   14    | exp NEQ exp
   15    | exp LT exp
   16    | exp GT exp
   17    | exp LT EQ exp
   18    | exp GT EQ exp
   19    | exp AND exp
   20    | exp OR exp
   21    | ID LBRACE record_args RBRACE
   22    | ID LBRACK exp RBRACK OF exp
   23    | if_exp
   24    | WHILE exp DO exp
   25    | FOR ID ASSIGN exp TO exp DO exp
   26    | BREAK

   27 let: LET decl_list IN exp_list

   28 decl_list: decl decl_list
   29          | /* empty */

   30 exp_list: exp_list SEMICOLON exp
   31         | exp

   32 decl: type_decl
   33     | var_decl
   34     | function_decl

   35 type_decl: TYPE ID EQ type

   36 type: ID
   37     | LBRACE fields RBRACE
   38     | ARRAY OF ID

   39 fields: fields COMMA ID COLON ID
   40       | ID COLON ID

   41 var_decl: VAR ID ASSIGN exp
   42         | VAR ID COLON ID ASSIGN exp

   43 function_decl: FUNCTION ID LPAREN function_args RPAREN COLON ID

   44 function_args: function_args COMMA ID COLON ID
   45              | COMMA ID COLON ID

   46 lvalue: ID
   47       | lvalue DOT ID
   48       | lvalue LBRACK exp RBRACK

   49 record_args: record_args COMMA ID EQ exp
   50            | ID EQ exp

   51 if_exp: IF exp THEN exp else_exp

   52 else_exp: ELSE exp
   53         | /* empty */


Terminals, with rules where they appear

$end (0) 0
error (256)
ID (258) 21 22 25 35 36 38 39 40 41 42 43 44 45 46 47 49 50
STRING (259) 8
INT (260) 7
COMMA (261) 39 44 45 49
COLON (262) 39 40 42 43 44 45
SEMICOLON (263) 30
LPAREN (264) 5 43
RPAREN (265) 5 43
LBRACK (266) 22 48
RBRACK (267) 22 48
LBRACE (268) 21 37
RBRACE (269) 21 37
DOT (270) 47
PLUS (271) 9
MINUS (272) 10
TIMES (273) 11
DIVIDE (274) 12
EQ (275) 13 17 18 35 49 50
NEQ (276) 14
LT (277) 15 17
LE (278)
GT (279) 16 18
GE (280)
AND (281) 19
OR (282) 20
ASSIGN (283) 4 25 41 42
ARRAY (284) 38
IF (285) 51
THEN (286) 51
ELSE (287) 52
WHILE (288) 24
FOR (289) 25
TO (290) 25
DO (291) 24 25
LET (292) 27
IN (293) 27
END (294)
OF (295) 22 38
BREAK (296) 26
NIL (297) 6
FUNCTION (298) 43
VAR (299) 41 42
TYPE (300) 35


Nonterminals, with rules where they appear

$accept (46)
    on left: 0
program (47)
    on left: 1, on right: 0
exp (48)
    on left: 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22
    23 24 25 26, on right: 1 4 9 10 11 12 13 14 15 16 17 18 19 20 22
    24 25 30 31 41 42 48 49 50 51 52
let (49)
    on left: 27, on right: 2
decl_list (50)
    on left: 28 29, on right: 27 28
exp_list (51)
    on left: 30 31, on right: 5 27 30
decl (52)
    on left: 32 33 34, on right: 28
type_decl (53)
    on left: 35, on right: 32
type (54)
    on left: 36 37 38, on right: 35
fields (55)
    on left: 39 40, on right: 37 39
var_decl (56)
    on left: 41 42, on right: 33
function_decl (57)
    on left: 43, on right: 34
function_args (58)
    on left: 44 45, on right: 43 44
lvalue (59)
    on left: 46 47 48, on right: 3 4 47 48
record_args (60)
    on left: 49 50, on right: 21 49
if_exp (61)
    on left: 51, on right: 23
else_exp (62)
    on left: 52 53, on right: 51


state 0

    0 $accept: . program $end

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10

    program  go to state 11
    exp      go to state 12
    let      go to state 13
    lvalue   go to state 14
    if_exp   go to state 15


state 1

   21 exp: ID . LBRACE record_args RBRACE
   22    | ID . LBRACK exp RBRACK OF exp
   46 lvalue: ID .

    LBRACK  shift, and go to state 16
    LBRACE  shift, and go to state 17

    LBRACK    [reduce using rule 46 (lvalue)]
    $default  reduce using rule 46 (lvalue)


state 2

    8 exp: STRING .

    $default  reduce using rule 8 (exp)


state 3

    7 exp: INT .

    $default  reduce using rule 7 (exp)


state 4

    5 exp: LPAREN . exp_list RPAREN

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10

    exp       go to state 18
    let       go to state 13
    exp_list  go to state 19
    lvalue    go to state 14
    if_exp    go to state 15


state 5

   51 if_exp: IF . exp THEN exp else_exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10

    exp     go to state 20
    let     go to state 13
    lvalue  go to state 14
    if_exp  go to state 15


state 6

   24 exp: WHILE . exp DO exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10

    exp     go to state 21
    let     go to state 13
    lvalue  go to state 14
    if_exp  go to state 15


state 7

   25 exp: FOR . ID ASSIGN exp TO exp DO exp

    ID  shift, and go to state 22


state 8

   27 let: LET . decl_list IN exp_list

    FUNCTION  shift, and go to state 23
    VAR       shift, and go to state 24
    TYPE      shift, and go to state 25

    $default  reduce using rule 29 (decl_list)

    decl_list      go to state 26
    decl           go to state 27
    type_decl      go to state 28
    var_decl       go to state 29
    function_decl  go to state 30


state 9

   26 exp: BREAK .

    $default  reduce using rule 26 (exp)


state 10

    6 exp: NIL .

    $default  reduce using rule 6 (exp)


state 11

    0 $accept: program . $end

    $end  shift, and go to state 31


state 12

    1 program: exp .
    9 exp: exp . PLUS exp
   10    | exp . MINUS exp
   11    | exp . TIMES exp
   12    | exp . DIVIDE exp
   13    | exp . EQ exp
   14    | exp . NEQ exp
   15    | exp . LT exp
   16    | exp . GT exp
   17    | exp . LT EQ exp
   18    | exp . GT EQ exp
   19    | exp . AND exp
   20    | exp . OR exp

    PLUS    shift, and go to state 32
    MINUS   shift, and go to state 33
    TIMES   shift, and go to state 34
    DIVIDE  shift, and go to state 35
    EQ      shift, and go to state 36
    NEQ     shift, and go to state 37
    LT      shift, and go to state 38
    GT      shift, and go to state 39
    AND     shift, and go to state 40
    OR      shift, and go to state 41

    $default  reduce using rule 1 (program)


state 13

    2 exp: let .

    $default  reduce using rule 2 (exp)


state 14

    3 exp: lvalue .
    4    | lvalue . ASSIGN exp
   47 lvalue: lvalue . DOT ID
   48       | lvalue . LBRACK exp RBRACK

    LBRACK  shift, and go to state 42
    DOT     shift, and go to state 43
    ASSIGN  shift, and go to state 44

    $default  reduce using rule 3 (exp)


state 15

   23 exp: if_exp .

    $default  reduce using rule 23 (exp)


state 16

   22 exp: ID LBRACK . exp RBRACK OF exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10

    exp     go to state 45
    let     go to state 13
    lvalue  go to state 14
    if_exp  go to state 15


state 17

   21 exp: ID LBRACE . record_args RBRACE

    ID  shift, and go to state 46

    record_args  go to state 47


state 18

    9 exp: exp . PLUS exp
   10    | exp . MINUS exp
   11    | exp . TIMES exp
   12    | exp . DIVIDE exp
   13    | exp . EQ exp
   14    | exp . NEQ exp
   15    | exp . LT exp
   16    | exp . GT exp
   17    | exp . LT EQ exp
   18    | exp . GT EQ exp
   19    | exp . AND exp
   20    | exp . OR exp
   31 exp_list: exp .

    PLUS    shift, and go to state 32
    MINUS   shift, and go to state 33
    TIMES   shift, and go to state 34
    DIVIDE  shift, and go to state 35
    EQ      shift, and go to state 36
    NEQ     shift, and go to state 37
    LT      shift, and go to state 38
    GT      shift, and go to state 39
    AND     shift, and go to state 40
    OR      shift, and go to state 41

    PLUS      [reduce using rule 31 (exp_list)]
    MINUS     [reduce using rule 31 (exp_list)]
    TIMES     [reduce using rule 31 (exp_list)]
    DIVIDE    [reduce using rule 31 (exp_list)]
    EQ        [reduce using rule 31 (exp_list)]
    NEQ       [reduce using rule 31 (exp_list)]
    LT        [reduce using rule 31 (exp_list)]
    GT        [reduce using rule 31 (exp_list)]
    AND       [reduce using rule 31 (exp_list)]
    OR        [reduce using rule 31 (exp_list)]
    $default  reduce using rule 31 (exp_list)


state 19

    5 exp: LPAREN exp_list . RPAREN
   30 exp_list: exp_list . SEMICOLON exp

    SEMICOLON  shift, and go to state 48
    RPAREN     shift, and go to state 49


state 20

    9 exp: exp . PLUS exp
   10    | exp . MINUS exp
   11    | exp . TIMES exp
   12    | exp . DIVIDE exp
   13    | exp . EQ exp
   14    | exp . NEQ exp
   15    | exp . LT exp
   16    | exp . GT exp
   17    | exp . LT EQ exp
   18    | exp . GT EQ exp
   19    | exp . AND exp
   20    | exp . OR exp
   51 if_exp: IF exp . THEN exp else_exp

    PLUS    shift, and go to state 32
    MINUS   shift, and go to state 33
    TIMES   shift, and go to state 34
    DIVIDE  shift, and go to state 35
    EQ      shift, and go to state 36
    NEQ     shift, and go to state 37
    LT      shift, and go to state 38
    GT      shift, and go to state 39
    AND     shift, and go to state 40
    OR      shift, and go to state 41
    THEN    shift, and go to state 50


state 21

    9 exp: exp . PLUS exp
   10    | exp . MINUS exp
   11    | exp . TIMES exp
   12    | exp . DIVIDE exp
   13    | exp . EQ exp
   14    | exp . NEQ exp
   15    | exp . LT exp
   16    | exp . GT exp
   17    | exp . LT EQ exp
   18    | exp . GT EQ exp
   19    | exp . AND exp
   20    | exp . OR exp
   24    | WHILE exp . DO exp

    PLUS    shift, and go to state 32
    MINUS   shift, and go to state 33
    TIMES   shift, and go to state 34
    DIVIDE  shift, and go to state 35
    EQ      shift, and go to state 36
    NEQ     shift, and go to state 37
    LT      shift, and go to state 38
    GT      shift, and go to state 39
    AND     shift, and go to state 40
    OR      shift, and go to state 41
    DO      shift, and go to state 51


state 22

   25 exp: FOR ID . ASSIGN exp TO exp DO exp

    ASSIGN  shift, and go to state 52


state 23

   43 function_decl: FUNCTION . ID LPAREN function_args RPAREN COLON ID

    ID  shift, and go to state 53


state 24

   41 var_decl: VAR . ID ASSIGN exp
   42         | VAR . ID COLON ID ASSIGN exp

    ID  shift, and go to state 54


state 25

   35 type_decl: TYPE . ID EQ type

    ID  shift, and go to state 55


state 26

   27 let: LET decl_list . IN exp_list

    IN  shift, and go to state 56


state 27

   28 decl_list: decl . decl_list

    FUNCTION  shift, and go to state 23
    VAR       shift, and go to state 24
    TYPE      shift, and go to state 25

    $default  reduce using rule 29 (decl_list)

    decl_list      go to state 57
    decl           go to state 27
    type_decl      go to state 28
    var_decl       go to state 29
    function_decl  go to state 30


state 28

   32 decl: type_decl .

    $default  reduce using rule 32 (decl)


state 29

   33 decl: var_decl .

    $default  reduce using rule 33 (decl)


state 30

   34 decl: function_decl .

    $default  reduce using rule 34 (decl)


state 31

    0 $accept: program $end .

    $default  accept


state 32

    9 exp: exp PLUS . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10

    exp     go to state 58
    let     go to state 13
    lvalue  go to state 14
    if_exp  go to state 15


state 33

   10 exp: exp MINUS . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10

    exp     go to state 59
    let     go to state 13
    lvalue  go to state 14
    if_exp  go to state 15


state 34

   11 exp: exp TIMES . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10

    exp     go to state 60
    let     go to state 13
    lvalue  go to state 14
    if_exp  go to state 15


state 35

   12 exp: exp DIVIDE . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10

    exp     go to state 61
    let     go to state 13
    lvalue  go to state 14
    if_exp  go to state 15


state 36

   13 exp: exp EQ . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10

    exp     go to state 62
    let     go to state 13
    lvalue  go to state 14
    if_exp  go to state 15


state 37

   14 exp: exp NEQ . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10

    exp     go to state 63
    let     go to state 13
    lvalue  go to state 14
    if_exp  go to state 15


state 38

   15 exp: exp LT . exp
   17    | exp LT . EQ exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    EQ      shift, and go to state 64
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10

    exp     go to state 65
    let     go to state 13
    lvalue  go to state 14
    if_exp  go to state 15


state 39

   16 exp: exp GT . exp
   18    | exp GT . EQ exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    EQ      shift, and go to state 66
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10

    exp     go to state 67
    let     go to state 13
    lvalue  go to state 14
    if_exp  go to state 15


state 40

   19 exp: exp AND . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10

    exp     go to state 68
    let     go to state 13
    lvalue  go to state 14
    if_exp  go to state 15


state 41

   20 exp: exp OR . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10

    exp     go to state 69
    let     go to state 13
    lvalue  go to state 14
    if_exp  go to state 15


state 42

   48 lvalue: lvalue LBRACK . exp RBRACK

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10

    exp     go to state 70
    let     go to state 13
    lvalue  go to state 14
    if_exp  go to state 15


state 43

   47 lvalue: lvalue DOT . ID

    ID  shift, and go to state 71


state 44

    4 exp: lvalue ASSIGN . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10

    exp     go to state 72
    let     go to state 13
    lvalue  go to state 14
    if_exp  go to state 15


state 45

    9 exp: exp . PLUS exp
   10    | exp . MINUS exp
   11    | exp . TIMES exp
   12    | exp . DIVIDE exp
   13    | exp . EQ exp
   14    | exp . NEQ exp
   15    | exp . LT exp
   16    | exp . GT exp
   17    | exp . LT EQ exp
   18    | exp . GT EQ exp
   19    | exp . AND exp
   20    | exp . OR exp
   22    | ID LBRACK exp . RBRACK OF exp

    RBRACK  shift, and go to state 73
    PLUS    shift, and go to state 32
    MINUS   shift, and go to state 33
    TIMES   shift, and go to state 34
    DIVIDE  shift, and go to state 35
    EQ      shift, and go to state 36
    NEQ     shift, and go to state 37
    LT      shift, and go to state 38
    GT      shift, and go to state 39
    AND     shift, and go to state 40
    OR      shift, and go to state 41


state 46

   50 record_args: ID . EQ exp

    EQ  shift, and go to state 74


state 47

   21 exp: ID LBRACE record_args . RBRACE
   49 record_args: record_args . COMMA ID EQ exp

    COMMA   shift, and go to state 75
    RBRACE  shift, and go to state 76


state 48

   30 exp_list: exp_list SEMICOLON . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10

    exp     go to state 77
    let     go to state 13
    lvalue  go to state 14
    if_exp  go to state 15


state 49

    5 exp: LPAREN exp_list RPAREN .

    $default  reduce using rule 5 (exp)


state 50

   51 if_exp: IF exp THEN . exp else_exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10

    exp     go to state 78
    let     go to state 13
    lvalue  go to state 14
    if_exp  go to state 15


state 51

   24 exp: WHILE exp DO . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10

    exp     go to state 79
    let     go to state 13
    lvalue  go to state 14
    if_exp  go to state 15


state 52

   25 exp: FOR ID ASSIGN . exp TO exp DO exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10

    exp     go to state 80
    let     go to state 13
    lvalue  go to state 14
    if_exp  go to state 15


state 53

   43 function_decl: FUNCTION ID . LPAREN function_args RPAREN COLON ID

    LPAREN  shift, and go to state 81


state 54

   41 var_decl: VAR ID . ASSIGN exp
   42         | VAR ID . COLON ID ASSIGN exp

    COLON   shift, and go to state 82
    ASSIGN  shift, and go to state 83


state 55

   35 type_decl: TYPE ID . EQ type

    EQ  shift, and go to state 84


state 56

   27 let: LET decl_list IN . exp_list

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10

    exp       go to state 18
    let       go to state 13
    exp_list  go to state 85
    lvalue    go to state 14
    if_exp    go to state 15


state 57

   28 decl_list: decl decl_list .

    $default  reduce using rule 28 (decl_list)


state 58

    9 exp: exp . PLUS exp
    9    | exp PLUS exp .
   10    | exp . MINUS exp
   11    | exp . TIMES exp
   12    | exp . DIVIDE exp
   13    | exp . EQ exp
   14    | exp . NEQ exp
   15    | exp . LT exp
   16    | exp . GT exp
   17    | exp . LT EQ exp
   18    | exp . GT EQ exp
   19    | exp . AND exp
   20    | exp . OR exp

    PLUS    shift, and go to state 32
    MINUS   shift, and go to state 33
    TIMES   shift, and go to state 34
    DIVIDE  shift, and go to state 35
    EQ      shift, and go to state 36
    NEQ     shift, and go to state 37
    LT      shift, and go to state 38
    GT      shift, and go to state 39
    AND     shift, and go to state 40
    OR      shift, and go to state 41

    PLUS      [reduce using rule 9 (exp)]
    MINUS     [reduce using rule 9 (exp)]
    TIMES     [reduce using rule 9 (exp)]
    DIVIDE    [reduce using rule 9 (exp)]
    EQ        [reduce using rule 9 (exp)]
    NEQ       [reduce using rule 9 (exp)]
    LT        [reduce using rule 9 (exp)]
    GT        [reduce using rule 9 (exp)]
    AND       [reduce using rule 9 (exp)]
    OR        [reduce using rule 9 (exp)]
    $default  reduce using rule 9 (exp)


state 59

    9 exp: exp . PLUS exp
   10    | exp . MINUS exp
   10    | exp MINUS exp .
   11    | exp . TIMES exp
   12    | exp . DIVIDE exp
   13    | exp . EQ exp
   14    | exp . NEQ exp
   15    | exp . LT exp
   16    | exp . GT exp
   17    | exp . LT EQ exp
   18    | exp . GT EQ exp
   19    | exp . AND exp
   20    | exp . OR exp

    PLUS    shift, and go to state 32
    MINUS   shift, and go to state 33
    TIMES   shift, and go to state 34
    DIVIDE  shift, and go to state 35
    EQ      shift, and go to state 36
    NEQ     shift, and go to state 37
    LT      shift, and go to state 38
    GT      shift, and go to state 39
    AND     shift, and go to state 40
    OR      shift, and go to state 41

    PLUS      [reduce using rule 10 (exp)]
    MINUS     [reduce using rule 10 (exp)]
    TIMES     [reduce using rule 10 (exp)]
    DIVIDE    [reduce using rule 10 (exp)]
    EQ        [reduce using rule 10 (exp)]
    NEQ       [reduce using rule 10 (exp)]
    LT        [reduce using rule 10 (exp)]
    GT        [reduce using rule 10 (exp)]
    AND       [reduce using rule 10 (exp)]
    OR        [reduce using rule 10 (exp)]
    $default  reduce using rule 10 (exp)


state 60

    9 exp: exp . PLUS exp
   10    | exp . MINUS exp
   11    | exp . TIMES exp
   11    | exp TIMES exp .
   12    | exp . DIVIDE exp
   13    | exp . EQ exp
   14    | exp . NEQ exp
   15    | exp . LT exp
   16    | exp . GT exp
   17    | exp . LT EQ exp
   18    | exp . GT EQ exp
   19    | exp . AND exp
   20    | exp . OR exp

    PLUS    shift, and go to state 32
    MINUS   shift, and go to state 33
    TIMES   shift, and go to state 34
    DIVIDE  shift, and go to state 35
    EQ      shift, and go to state 36
    NEQ     shift, and go to state 37
    LT      shift, and go to state 38
    GT      shift, and go to state 39
    AND     shift, and go to state 40
    OR      shift, and go to state 41

    PLUS      [reduce using rule 11 (exp)]
    MINUS     [reduce using rule 11 (exp)]
    TIMES     [reduce using rule 11 (exp)]
    DIVIDE    [reduce using rule 11 (exp)]
    EQ        [reduce using rule 11 (exp)]
    NEQ       [reduce using rule 11 (exp)]
    LT        [reduce using rule 11 (exp)]
    GT        [reduce using rule 11 (exp)]
    AND       [reduce using rule 11 (exp)]
    OR        [reduce using rule 11 (exp)]
    $default  reduce using rule 11 (exp)


state 61

    9 exp: exp . PLUS exp
   10    | exp . MINUS exp
   11    | exp . TIMES exp
   12    | exp . DIVIDE exp
   12    | exp DIVIDE exp .
   13    | exp . EQ exp
   14    | exp . NEQ exp
   15    | exp . LT exp
   16    | exp . GT exp
   17    | exp . LT EQ exp
   18    | exp . GT EQ exp
   19    | exp . AND exp
   20    | exp . OR exp

    PLUS    shift, and go to state 32
    MINUS   shift, and go to state 33
    TIMES   shift, and go to state 34
    DIVIDE  shift, and go to state 35
    EQ      shift, and go to state 36
    NEQ     shift, and go to state 37
    LT      shift, and go to state 38
    GT      shift, and go to state 39
    AND     shift, and go to state 40
    OR      shift, and go to state 41

    PLUS      [reduce using rule 12 (exp)]
    MINUS     [reduce using rule 12 (exp)]
    TIMES     [reduce using rule 12 (exp)]
    DIVIDE    [reduce using rule 12 (exp)]
    EQ        [reduce using rule 12 (exp)]
    NEQ       [reduce using rule 12 (exp)]
    LT        [reduce using rule 12 (exp)]
    GT        [reduce using rule 12 (exp)]
    AND       [reduce using rule 12 (exp)]
    OR        [reduce using rule 12 (exp)]
    $default  reduce using rule 12 (exp)


state 62

    9 exp: exp . PLUS exp
   10    | exp . MINUS exp
   11    | exp . TIMES exp
   12    | exp . DIVIDE exp
   13    | exp . EQ exp
   13    | exp EQ exp .
   14    | exp . NEQ exp
   15    | exp . LT exp
   16    | exp . GT exp
   17    | exp . LT EQ exp
   18    | exp . GT EQ exp
   19    | exp . AND exp
   20    | exp . OR exp

    PLUS    shift, and go to state 32
    MINUS   shift, and go to state 33
    TIMES   shift, and go to state 34
    DIVIDE  shift, and go to state 35
    EQ      shift, and go to state 36
    NEQ     shift, and go to state 37
    LT      shift, and go to state 38
    GT      shift, and go to state 39
    AND     shift, and go to state 40
    OR      shift, and go to state 41

    PLUS      [reduce using rule 13 (exp)]
    MINUS     [reduce using rule 13 (exp)]
    TIMES     [reduce using rule 13 (exp)]
    DIVIDE    [reduce using rule 13 (exp)]
    EQ        [reduce using rule 13 (exp)]
    NEQ       [reduce using rule 13 (exp)]
    LT        [reduce using rule 13 (exp)]
    GT        [reduce using rule 13 (exp)]
    AND       [reduce using rule 13 (exp)]
    OR        [reduce using rule 13 (exp)]
    $default  reduce using rule 13 (exp)


state 63

    9 exp: exp . PLUS exp
   10    | exp . MINUS exp
   11    | exp . TIMES exp
   12    | exp . DIVIDE exp
   13    | exp . EQ exp
   14    | exp . NEQ exp
   14    | exp NEQ exp .
   15    | exp . LT exp
   16    | exp . GT exp
   17    | exp . LT EQ exp
   18    | exp . GT EQ exp
   19    | exp . AND exp
   20    | exp . OR exp

    PLUS    shift, and go to state 32
    MINUS   shift, and go to state 33
    TIMES   shift, and go to state 34
    DIVIDE  shift, and go to state 35
    EQ      shift, and go to state 36
    NEQ     shift, and go to state 37
    LT      shift, and go to state 38
    GT      shift, and go to state 39
    AND     shift, and go to state 40
    OR      shift, and go to state 41

    PLUS      [reduce using rule 14 (exp)]
    MINUS     [reduce using rule 14 (exp)]
    TIMES     [reduce using rule 14 (exp)]
    DIVIDE    [reduce using rule 14 (exp)]
    EQ        [reduce using rule 14 (exp)]
    NEQ       [reduce using rule 14 (exp)]
    LT        [reduce using rule 14 (exp)]
    GT        [reduce using rule 14 (exp)]
    AND       [reduce using rule 14 (exp)]
    OR        [reduce using rule 14 (exp)]
    $default  reduce using rule 14 (exp)


state 64

   17 exp: exp LT EQ . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10

    exp     go to state 86
    let     go to state 13
    lvalue  go to state 14
    if_exp  go to state 15


state 65

    9 exp: exp . PLUS exp
   10    | exp . MINUS exp
   11    | exp . TIMES exp
   12    | exp . DIVIDE exp
   13    | exp . EQ exp
   14    | exp . NEQ exp
   15    | exp . LT exp
   15    | exp LT exp .
   16    | exp . GT exp
   17    | exp . LT EQ exp
   18    | exp . GT EQ exp
   19    | exp . AND exp
   20    | exp . OR exp

    PLUS    shift, and go to state 32
    MINUS   shift, and go to state 33
    TIMES   shift, and go to state 34
    DIVIDE  shift, and go to state 35
    EQ      shift, and go to state 36
    NEQ     shift, and go to state 37
    LT      shift, and go to state 38
    GT      shift, and go to state 39
    AND     shift, and go to state 40
    OR      shift, and go to state 41

    PLUS      [reduce using rule 15 (exp)]
    MINUS     [reduce using rule 15 (exp)]
    TIMES     [reduce using rule 15 (exp)]
    DIVIDE    [reduce using rule 15 (exp)]
    EQ        [reduce using rule 15 (exp)]
    NEQ       [reduce using rule 15 (exp)]
    LT        [reduce using rule 15 (exp)]
    GT        [reduce using rule 15 (exp)]
    AND       [reduce using rule 15 (exp)]
    OR        [reduce using rule 15 (exp)]
    $default  reduce using rule 15 (exp)


state 66

   18 exp: exp GT EQ . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10

    exp     go to state 87
    let     go to state 13
    lvalue  go to state 14
    if_exp  go to state 15


state 67

    9 exp: exp . PLUS exp
   10    | exp . MINUS exp
   11    | exp . TIMES exp
   12    | exp . DIVIDE exp
   13    | exp . EQ exp
   14    | exp . NEQ exp
   15    | exp . LT exp
   16    | exp . GT exp
   16    | exp GT exp .
   17    | exp . LT EQ exp
   18    | exp . GT EQ exp
   19    | exp . AND exp
   20    | exp . OR exp

    PLUS    shift, and go to state 32
    MINUS   shift, and go to state 33
    TIMES   shift, and go to state 34
    DIVIDE  shift, and go to state 35
    EQ      shift, and go to state 36
    NEQ     shift, and go to state 37
    LT      shift, and go to state 38
    GT      shift, and go to state 39
    AND     shift, and go to state 40
    OR      shift, and go to state 41

    PLUS      [reduce using rule 16 (exp)]
    MINUS     [reduce using rule 16 (exp)]
    TIMES     [reduce using rule 16 (exp)]
    DIVIDE    [reduce using rule 16 (exp)]
    EQ        [reduce using rule 16 (exp)]
    NEQ       [reduce using rule 16 (exp)]
    LT        [reduce using rule 16 (exp)]
    GT        [reduce using rule 16 (exp)]
    AND       [reduce using rule 16 (exp)]
    OR        [reduce using rule 16 (exp)]
    $default  reduce using rule 16 (exp)


state 68

    9 exp: exp . PLUS exp
   10    | exp . MINUS exp
   11    | exp . TIMES exp
   12    | exp . DIVIDE exp
   13    | exp . EQ exp
   14    | exp . NEQ exp
   15    | exp . LT exp
   16    | exp . GT exp
   17    | exp . LT EQ exp
   18    | exp . GT EQ exp
   19    | exp . AND exp
   19    | exp AND exp .
   20    | exp . OR exp

    PLUS    shift, and go to state 32
    MINUS   shift, and go to state 33
    TIMES   shift, and go to state 34
    DIVIDE  shift, and go to state 35
    EQ      shift, and go to state 36
    NEQ     shift, and go to state 37
    LT      shift, and go to state 38
    GT      shift, and go to state 39
    AND     shift, and go to state 40
    OR      shift, and go to state 41

    PLUS      [reduce using rule 19 (exp)]
    MINUS     [reduce using rule 19 (exp)]
    TIMES     [reduce using rule 19 (exp)]
    DIVIDE    [reduce using rule 19 (exp)]
    EQ        [reduce using rule 19 (exp)]
    NEQ       [reduce using rule 19 (exp)]
    LT        [reduce using rule 19 (exp)]
    GT        [reduce using rule 19 (exp)]
    AND       [reduce using rule 19 (exp)]
    OR        [reduce using rule 19 (exp)]
    $default  reduce using rule 19 (exp)


state 69

    9 exp: exp . PLUS exp
   10    | exp . MINUS exp
   11    | exp . TIMES exp
   12    | exp . DIVIDE exp
   13    | exp . EQ exp
   14    | exp . NEQ exp
   15    | exp . LT exp
   16    | exp . GT exp
   17    | exp . LT EQ exp
   18    | exp . GT EQ exp
   19    | exp . AND exp
   20    | exp . OR exp
   20    | exp OR exp .

    PLUS    shift, and go to state 32
    MINUS   shift, and go to state 33
    TIMES   shift, and go to state 34
    DIVIDE  shift, and go to state 35
    EQ      shift, and go to state 36
    NEQ     shift, and go to state 37
    LT      shift, and go to state 38
    GT      shift, and go to state 39
    AND     shift, and go to state 40
    OR      shift, and go to state 41

    PLUS      [reduce using rule 20 (exp)]
    MINUS     [reduce using rule 20 (exp)]
    TIMES     [reduce using rule 20 (exp)]
    DIVIDE    [reduce using rule 20 (exp)]
    EQ        [reduce using rule 20 (exp)]
    NEQ       [reduce using rule 20 (exp)]
    LT        [reduce using rule 20 (exp)]
    GT        [reduce using rule 20 (exp)]
    AND       [reduce using rule 20 (exp)]
    OR        [reduce using rule 20 (exp)]
    $default  reduce using rule 20 (exp)


state 70

    9 exp: exp . PLUS exp
   10    | exp . MINUS exp
   11    | exp . TIMES exp
   12    | exp . DIVIDE exp
   13    | exp . EQ exp
   14    | exp . NEQ exp
   15    | exp . LT exp
   16    | exp . GT exp
   17    | exp . LT EQ exp
   18    | exp . GT EQ exp
   19    | exp . AND exp
   20    | exp . OR exp
   48 lvalue: lvalue LBRACK exp . RBRACK

    RBRACK  shift, and go to state 88
    PLUS    shift, and go to state 32
    MINUS   shift, and go to state 33
    TIMES   shift, and go to state 34
    DIVIDE  shift, and go to state 35
    EQ      shift, and go to state 36
    NEQ     shift, and go to state 37
    LT      shift, and go to state 38
    GT      shift, and go to state 39
    AND     shift, and go to state 40
    OR      shift, and go to state 41


state 71

   47 lvalue: lvalue DOT ID .

    $default  reduce using rule 47 (lvalue)


state 72

    4 exp: lvalue ASSIGN exp .
    9    | exp . PLUS exp
   10    | exp . MINUS exp
   11    | exp . TIMES exp
   12    | exp . DIVIDE exp
   13    | exp . EQ exp
   14    | exp . NEQ exp
   15    | exp . LT exp
   16    | exp . GT exp
   17    | exp . LT EQ exp
   18    | exp . GT EQ exp
   19    | exp . AND exp
   20    | exp . OR exp

    PLUS    shift, and go to state 32
    MINUS   shift, and go to state 33
    TIMES   shift, and go to state 34
    DIVIDE  shift, and go to state 35
    EQ      shift, and go to state 36
    NEQ     shift, and go to state 37
    LT      shift, and go to state 38
    GT      shift, and go to state 39
    AND     shift, and go to state 40
    OR      shift, and go to state 41

    PLUS      [reduce using rule 4 (exp)]
    MINUS     [reduce using rule 4 (exp)]
    TIMES     [reduce using rule 4 (exp)]
    DIVIDE    [reduce using rule 4 (exp)]
    EQ        [reduce using rule 4 (exp)]
    NEQ       [reduce using rule 4 (exp)]
    LT        [reduce using rule 4 (exp)]
    GT        [reduce using rule 4 (exp)]
    AND       [reduce using rule 4 (exp)]
    OR        [reduce using rule 4 (exp)]
    $default  reduce using rule 4 (exp)


state 73

   22 exp: ID LBRACK exp RBRACK . OF exp

    OF  shift, and go to state 89


state 74

   50 record_args: ID EQ . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10

    exp     go to state 90
    let     go to state 13
    lvalue  go to state 14
    if_exp  go to state 15


state 75

   49 record_args: record_args COMMA . ID EQ exp

    ID  shift, and go to state 91


state 76

   21 exp: ID LBRACE record_args RBRACE .

    $default  reduce using rule 21 (exp)


state 77

    9 exp: exp . PLUS exp
   10    | exp . MINUS exp
   11    | exp . TIMES exp
   12    | exp . DIVIDE exp
   13    | exp . EQ exp
   14    | exp . NEQ exp
   15    | exp . LT exp
   16    | exp . GT exp
   17    | exp . LT EQ exp
   18    | exp . GT EQ exp
   19    | exp . AND exp
   20    | exp . OR exp
   30 exp_list: exp_list SEMICOLON exp .

    PLUS    shift, and go to state 32
    MINUS   shift, and go to state 33
    TIMES   shift, and go to state 34
    DIVIDE  shift, and go to state 35
    EQ      shift, and go to state 36
    NEQ     shift, and go to state 37
    LT      shift, and go to state 38
    GT      shift, and go to state 39
    AND     shift, and go to state 40
    OR      shift, and go to state 41

    PLUS      [reduce using rule 30 (exp_list)]
    MINUS     [reduce using rule 30 (exp_list)]
    TIMES     [reduce using rule 30 (exp_list)]
    DIVIDE    [reduce using rule 30 (exp_list)]
    EQ        [reduce using rule 30 (exp_list)]
    NEQ       [reduce using rule 30 (exp_list)]
    LT        [reduce using rule 30 (exp_list)]
    GT        [reduce using rule 30 (exp_list)]
    AND       [reduce using rule 30 (exp_list)]
    OR        [reduce using rule 30 (exp_list)]
    $default  reduce using rule 30 (exp_list)


state 78

    9 exp: exp . PLUS exp
   10    | exp . MINUS exp
   11    | exp . TIMES exp
   12    | exp . DIVIDE exp
   13    | exp . EQ exp
   14    | exp . NEQ exp
   15    | exp . LT exp
   16    | exp . GT exp
   17    | exp . LT EQ exp
   18    | exp . GT EQ exp
   19    | exp . AND exp
   20    | exp . OR exp
   51 if_exp: IF exp THEN exp . else_exp

    PLUS    shift, and go to state 32
    MINUS   shift, and go to state 33
    TIMES   shift, and go to state 34
    DIVIDE  shift, and go to state 35
    EQ      shift, and go to state 36
    NEQ     shift, and go to state 37
    LT      shift, and go to state 38
    GT      shift, and go to state 39
    AND     shift, and go to state 40
    OR      shift, and go to state 41
    ELSE    shift, and go to state 92

    PLUS      [reduce using rule 53 (else_exp)]
    MINUS     [reduce using rule 53 (else_exp)]
    TIMES     [reduce using rule 53 (else_exp)]
    DIVIDE    [reduce using rule 53 (else_exp)]
    EQ        [reduce using rule 53 (else_exp)]
    NEQ       [reduce using rule 53 (else_exp)]
    LT        [reduce using rule 53 (else_exp)]
    GT        [reduce using rule 53 (else_exp)]
    AND       [reduce using rule 53 (else_exp)]
    OR        [reduce using rule 53 (else_exp)]
    ELSE      [reduce using rule 53 (else_exp)]
    $default  reduce using rule 53 (else_exp)

    else_exp  go to state 93


state 79

    9 exp: exp . PLUS exp
   10    | exp . MINUS exp
   11    | exp . TIMES exp
   12    | exp . DIVIDE exp
   13    | exp . EQ exp
   14    | exp . NEQ exp
   15    | exp . LT exp
   16    | exp . GT exp
   17    | exp . LT EQ exp
   18    | exp . GT EQ exp
   19    | exp . AND exp
   20    | exp . OR exp
   24    | WHILE exp DO exp .

    PLUS    shift, and go to state 32
    MINUS   shift, and go to state 33
    TIMES   shift, and go to state 34
    DIVIDE  shift, and go to state 35
    EQ      shift, and go to state 36
    NEQ     shift, and go to state 37
    LT      shift, and go to state 38
    GT      shift, and go to state 39
    AND     shift, and go to state 40
    OR      shift, and go to state 41

    PLUS      [reduce using rule 24 (exp)]
    MINUS     [reduce using rule 24 (exp)]
    TIMES     [reduce using rule 24 (exp)]
    DIVIDE    [reduce using rule 24 (exp)]
    EQ        [reduce using rule 24 (exp)]
    NEQ       [reduce using rule 24 (exp)]
    LT        [reduce using rule 24 (exp)]
    GT        [reduce using rule 24 (exp)]
    AND       [reduce using rule 24 (exp)]
    OR        [reduce using rule 24 (exp)]
    $default  reduce using rule 24 (exp)


state 80

    9 exp: exp . PLUS exp
   10    | exp . MINUS exp
   11    | exp . TIMES exp
   12    | exp . DIVIDE exp
   13    | exp . EQ exp
   14    | exp . NEQ exp
   15    | exp . LT exp
   16    | exp . GT exp
   17    | exp . LT EQ exp
   18    | exp . GT EQ exp
   19    | exp . AND exp
   20    | exp . OR exp
   25    | FOR ID ASSIGN exp . TO exp DO exp

    PLUS    shift, and go to state 32
    MINUS   shift, and go to state 33
    TIMES   shift, and go to state 34
    DIVIDE  shift, and go to state 35
    EQ      shift, and go to state 36
    NEQ     shift, and go to state 37
    LT      shift, and go to state 38
    GT      shift, and go to state 39
    AND     shift, and go to state 40
    OR      shift, and go to state 41
    TO      shift, and go to state 94


state 81

   43 function_decl: FUNCTION ID LPAREN . function_args RPAREN COLON ID

    COMMA  shift, and go to state 95

    function_args  go to state 96


state 82

   42 var_decl: VAR ID COLON . ID ASSIGN exp

    ID  shift, and go to state 97


state 83

   41 var_decl: VAR ID ASSIGN . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10

    exp     go to state 98
    let     go to state 13
    lvalue  go to state 14
    if_exp  go to state 15


state 84

   35 type_decl: TYPE ID EQ . type

    ID      shift, and go to state 99
    LBRACE  shift, and go to state 100
    ARRAY   shift, and go to state 101

    type  go to state 102


state 85

   27 let: LET decl_list IN exp_list .
   30 exp_list: exp_list . SEMICOLON exp

    SEMICOLON  shift, and go to state 48

    SEMICOLON  [reduce using rule 27 (let)]
    $default   reduce using rule 27 (let)


state 86

    9 exp: exp . PLUS exp
   10    | exp . MINUS exp
   11    | exp . TIMES exp
   12    | exp . DIVIDE exp
   13    | exp . EQ exp
   14    | exp . NEQ exp
   15    | exp . LT exp
   16    | exp . GT exp
   17    | exp . LT EQ exp
   17    | exp LT EQ exp .
   18    | exp . GT EQ exp
   19    | exp . AND exp
   20    | exp . OR exp

    PLUS    shift, and go to state 32
    MINUS   shift, and go to state 33
    TIMES   shift, and go to state 34
    DIVIDE  shift, and go to state 35
    EQ      shift, and go to state 36
    NEQ     shift, and go to state 37
    LT      shift, and go to state 38
    GT      shift, and go to state 39
    AND     shift, and go to state 40
    OR      shift, and go to state 41

    PLUS      [reduce using rule 17 (exp)]
    MINUS     [reduce using rule 17 (exp)]
    TIMES     [reduce using rule 17 (exp)]
    DIVIDE    [reduce using rule 17 (exp)]
    EQ        [reduce using rule 17 (exp)]
    NEQ       [reduce using rule 17 (exp)]
    LT        [reduce using rule 17 (exp)]
    GT        [reduce using rule 17 (exp)]
    AND       [reduce using rule 17 (exp)]
    OR        [reduce using rule 17 (exp)]
    $default  reduce using rule 17 (exp)


state 87

    9 exp: exp . PLUS exp
   10    | exp . MINUS exp
   11    | exp . TIMES exp
   12    | exp . DIVIDE exp
   13    | exp . EQ exp
   14    | exp . NEQ exp
   15    | exp . LT exp
   16    | exp . GT exp
   17    | exp . LT EQ exp
   18    | exp . GT EQ exp
   18    | exp GT EQ exp .
   19    | exp . AND exp
   20    | exp . OR exp

    PLUS    shift, and go to state 32
    MINUS   shift, and go to state 33
    TIMES   shift, and go to state 34
    DIVIDE  shift, and go to state 35
    EQ      shift, and go to state 36
    NEQ     shift, and go to state 37
    LT      shift, and go to state 38
    GT      shift, and go to state 39
    AND     shift, and go to state 40
    OR      shift, and go to state 41

    PLUS      [reduce using rule 18 (exp)]
    MINUS     [reduce using rule 18 (exp)]
    TIMES     [reduce using rule 18 (exp)]
    DIVIDE    [reduce using rule 18 (exp)]
    EQ        [reduce using rule 18 (exp)]
    NEQ       [reduce using rule 18 (exp)]
    LT        [reduce using rule 18 (exp)]
    GT        [reduce using rule 18 (exp)]
    AND       [reduce using rule 18 (exp)]
    OR        [reduce using rule 18 (exp)]
    $default  reduce using rule 18 (exp)


state 88

   48 lvalue: lvalue LBRACK exp RBRACK .

    $default  reduce using rule 48 (lvalue)


state 89

   22 exp: ID LBRACK exp RBRACK OF . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10

    exp     go to state 103
    let     go to state 13
    lvalue  go to state 14
    if_exp  go to state 15


state 90

    9 exp: exp . PLUS exp
   10    | exp . MINUS exp
   11    | exp . TIMES exp
   12    | exp . DIVIDE exp
   13    | exp . EQ exp
   14    | exp . NEQ exp
   15    | exp . LT exp
   16    | exp . GT exp
   17    | exp . LT EQ exp
   18    | exp . GT EQ exp
   19    | exp . AND exp
   20    | exp . OR exp
   50 record_args: ID EQ exp .

    PLUS    shift, and go to state 32
    MINUS   shift, and go to state 33
    TIMES   shift, and go to state 34
    DIVIDE  shift, and go to state 35
    EQ      shift, and go to state 36
    NEQ     shift, and go to state 37
    LT      shift, and go to state 38
    GT      shift, and go to state 39
    AND     shift, and go to state 40
    OR      shift, and go to state 41

    $default  reduce using rule 50 (record_args)


state 91

   49 record_args: record_args COMMA ID . EQ exp

    EQ  shift, and go to state 104


state 92

   52 else_exp: ELSE . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10

    exp     go to state 105
    let     go to state 13
    lvalue  go to state 14
    if_exp  go to state 15


state 93

   51 if_exp: IF exp THEN exp else_exp .

    $default  reduce using rule 51 (if_exp)


state 94

   25 exp: FOR ID ASSIGN exp TO . exp DO exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10

    exp     go to state 106
    let     go to state 13
    lvalue  go to state 14
    if_exp  go to state 15


state 95

   45 function_args: COMMA . ID COLON ID

    ID  shift, and go to state 107


state 96

   43 function_decl: FUNCTION ID LPAREN function_args . RPAREN COLON ID
   44 function_args: function_args . COMMA ID COLON ID

    COMMA   shift, and go to state 108
    RPAREN  shift, and go to state 109


state 97

   42 var_decl: VAR ID COLON ID . ASSIGN exp

    ASSIGN  shift, and go to state 110


state 98

    9 exp: exp . PLUS exp
   10    | exp . MINUS exp
   11    | exp . TIMES exp
   12    | exp . DIVIDE exp
   13    | exp . EQ exp
   14    | exp . NEQ exp
   15    | exp . LT exp
   16    | exp . GT exp
   17    | exp . LT EQ exp
   18    | exp . GT EQ exp
   19    | exp . AND exp
   20    | exp . OR exp
   41 var_decl: VAR ID ASSIGN exp .

    PLUS    shift, and go to state 32
    MINUS   shift, and go to state 33
    TIMES   shift, and go to state 34
    DIVIDE  shift, and go to state 35
    EQ      shift, and go to state 36
    NEQ     shift, and go to state 37
    LT      shift, and go to state 38
    GT      shift, and go to state 39
    AND     shift, and go to state 40
    OR      shift, and go to state 41

    $default  reduce using rule 41 (var_decl)


state 99

   36 type: ID .

    $default  reduce using rule 36 (type)


state 100

   37 type: LBRACE . fields RBRACE

    ID  shift, and go to state 111

    fields  go to state 112


state 101

   38 type: ARRAY . OF ID

    OF  shift, and go to state 113


state 102

   35 type_decl: TYPE ID EQ type .

    $default  reduce using rule 35 (type_decl)


state 103

    9 exp: exp . PLUS exp
   10    | exp . MINUS exp
   11    | exp . TIMES exp
   12    | exp . DIVIDE exp
   13    | exp . EQ exp
   14    | exp . NEQ exp
   15    | exp . LT exp
   16    | exp . GT exp
   17    | exp . LT EQ exp
   18    | exp . GT EQ exp
   19    | exp . AND exp
   20    | exp . OR exp
   22    | ID LBRACK exp RBRACK OF exp .

    PLUS    shift, and go to state 32
    MINUS   shift, and go to state 33
    TIMES   shift, and go to state 34
    DIVIDE  shift, and go to state 35
    EQ      shift, and go to state 36
    NEQ     shift, and go to state 37
    LT      shift, and go to state 38
    GT      shift, and go to state 39
    AND     shift, and go to state 40
    OR      shift, and go to state 41

    PLUS      [reduce using rule 22 (exp)]
    MINUS     [reduce using rule 22 (exp)]
    TIMES     [reduce using rule 22 (exp)]
    DIVIDE    [reduce using rule 22 (exp)]
    EQ        [reduce using rule 22 (exp)]
    NEQ       [reduce using rule 22 (exp)]
    LT        [reduce using rule 22 (exp)]
    GT        [reduce using rule 22 (exp)]
    AND       [reduce using rule 22 (exp)]
    OR        [reduce using rule 22 (exp)]
    $default  reduce using rule 22 (exp)


state 104

   49 record_args: record_args COMMA ID EQ . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10

    exp     go to state 114
    let     go to state 13
    lvalue  go to state 14
    if_exp  go to state 15


state 105

    9 exp: exp . PLUS exp
   10    | exp . MINUS exp
   11    | exp . TIMES exp
   12    | exp . DIVIDE exp
   13    | exp . EQ exp
   14    | exp . NEQ exp
   15    | exp . LT exp
   16    | exp . GT exp
   17    | exp . LT EQ exp
   18    | exp . GT EQ exp
   19    | exp . AND exp
   20    | exp . OR exp
   52 else_exp: ELSE exp .

    PLUS    shift, and go to state 32
    MINUS   shift, and go to state 33
    TIMES   shift, and go to state 34
    DIVIDE  shift, and go to state 35
    EQ      shift, and go to state 36
    NEQ     shift, and go to state 37
    LT      shift, and go to state 38
    GT      shift, and go to state 39
    AND     shift, and go to state 40
    OR      shift, and go to state 41

    PLUS      [reduce using rule 52 (else_exp)]
    MINUS     [reduce using rule 52 (else_exp)]
    TIMES     [reduce using rule 52 (else_exp)]
    DIVIDE    [reduce using rule 52 (else_exp)]
    EQ        [reduce using rule 52 (else_exp)]
    NEQ       [reduce using rule 52 (else_exp)]
    LT        [reduce using rule 52 (else_exp)]
    GT        [reduce using rule 52 (else_exp)]
    AND       [reduce using rule 52 (else_exp)]
    OR        [reduce using rule 52 (else_exp)]
    $default  reduce using rule 52 (else_exp)


state 106

    9 exp: exp . PLUS exp
   10    | exp . MINUS exp
   11    | exp . TIMES exp
   12    | exp . DIVIDE exp
   13    | exp . EQ exp
   14    | exp . NEQ exp
   15    | exp . LT exp
   16    | exp . GT exp
   17    | exp . LT EQ exp
   18    | exp . GT EQ exp
   19    | exp . AND exp
   20    | exp . OR exp
   25    | FOR ID ASSIGN exp TO exp . DO exp

    PLUS    shift, and go to state 32
    MINUS   shift, and go to state 33
    TIMES   shift, and go to state 34
    DIVIDE  shift, and go to state 35
    EQ      shift, and go to state 36
    NEQ     shift, and go to state 37
    LT      shift, and go to state 38
    GT      shift, and go to state 39
    AND     shift, and go to state 40
    OR      shift, and go to state 41
    DO      shift, and go to state 115


state 107

   45 function_args: COMMA ID . COLON ID

    COLON  shift, and go to state 116


state 108

   44 function_args: function_args COMMA . ID COLON ID

    ID  shift, and go to state 117


state 109

   43 function_decl: FUNCTION ID LPAREN function_args RPAREN . COLON ID

    COLON  shift, and go to state 118


state 110

   42 var_decl: VAR ID COLON ID ASSIGN . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10

    exp     go to state 119
    let     go to state 13
    lvalue  go to state 14
    if_exp  go to state 15


state 111

   40 fields: ID . COLON ID

    COLON  shift, and go to state 120


state 112

   37 type: LBRACE fields . RBRACE
   39 fields: fields . COMMA ID COLON ID

    COMMA   shift, and go to state 121
    RBRACE  shift, and go to state 122


state 113

   38 type: ARRAY OF . ID

    ID  shift, and go to state 123


state 114

    9 exp: exp . PLUS exp
   10    | exp . MINUS exp
   11    | exp . TIMES exp
   12    | exp . DIVIDE exp
   13    | exp . EQ exp
   14    | exp . NEQ exp
   15    | exp . LT exp
   16    | exp . GT exp
   17    | exp . LT EQ exp
   18    | exp . GT EQ exp
   19    | exp . AND exp
   20    | exp . OR exp
   49 record_args: record_args COMMA ID EQ exp .

    PLUS    shift, and go to state 32
    MINUS   shift, and go to state 33
    TIMES   shift, and go to state 34
    DIVIDE  shift, and go to state 35
    EQ      shift, and go to state 36
    NEQ     shift, and go to state 37
    LT      shift, and go to state 38
    GT      shift, and go to state 39
    AND     shift, and go to state 40
    OR      shift, and go to state 41

    $default  reduce using rule 49 (record_args)


state 115

   25 exp: FOR ID ASSIGN exp TO exp DO . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10

    exp     go to state 124
    let     go to state 13
    lvalue  go to state 14
    if_exp  go to state 15


state 116

   45 function_args: COMMA ID COLON . ID

    ID  shift, and go to state 125


state 117

   44 function_args: function_args COMMA ID . COLON ID

    COLON  shift, and go to state 126


state 118

   43 function_decl: FUNCTION ID LPAREN function_args RPAREN COLON . ID

    ID  shift, and go to state 127


state 119

    9 exp: exp . PLUS exp
   10    | exp . MINUS exp
   11    | exp . TIMES exp
   12    | exp . DIVIDE exp
   13    | exp . EQ exp
   14    | exp . NEQ exp
   15    | exp . LT exp
   16    | exp . GT exp
   17    | exp . LT EQ exp
   18    | exp . GT EQ exp
   19    | exp . AND exp
   20    | exp . OR exp
   42 var_decl: VAR ID COLON ID ASSIGN exp .

    PLUS    shift, and go to state 32
    MINUS   shift, and go to state 33
    TIMES   shift, and go to state 34
    DIVIDE  shift, and go to state 35
    EQ      shift, and go to state 36
    NEQ     shift, and go to state 37
    LT      shift, and go to state 38
    GT      shift, and go to state 39
    AND     shift, and go to state 40
    OR      shift, and go to state 41

    $default  reduce using rule 42 (var_decl)


state 120

   40 fields: ID COLON . ID

    ID  shift, and go to state 128


state 121

   39 fields: fields COMMA . ID COLON ID

    ID  shift, and go to state 129


state 122

   37 type: LBRACE fields RBRACE .

    $default  reduce using rule 37 (type)


state 123

   38 type: ARRAY OF ID .

    $default  reduce using rule 38 (type)


state 124

    9 exp: exp . PLUS exp
   10    | exp . MINUS exp
   11    | exp . TIMES exp
   12    | exp . DIVIDE exp
   13    | exp . EQ exp
   14    | exp . NEQ exp
   15    | exp . LT exp
   16    | exp . GT exp
   17    | exp . LT EQ exp
   18    | exp . GT EQ exp
   19    | exp . AND exp
   20    | exp . OR exp
   25    | FOR ID ASSIGN exp TO exp DO exp .

    PLUS    shift, and go to state 32
    MINUS   shift, and go to state 33
    TIMES   shift, and go to state 34
    DIVIDE  shift, and go to state 35
    EQ      shift, and go to state 36
    NEQ     shift, and go to state 37
    LT      shift, and go to state 38
    GT      shift, and go to state 39
    AND     shift, and go to state 40
    OR      shift, and go to state 41

    PLUS      [reduce using rule 25 (exp)]
    MINUS     [reduce using rule 25 (exp)]
    TIMES     [reduce using rule 25 (exp)]
    DIVIDE    [reduce using rule 25 (exp)]
    EQ        [reduce using rule 25 (exp)]
    NEQ       [reduce using rule 25 (exp)]
    LT        [reduce using rule 25 (exp)]
    GT        [reduce using rule 25 (exp)]
    AND       [reduce using rule 25 (exp)]
    OR        [reduce using rule 25 (exp)]
    $default  reduce using rule 25 (exp)


state 125

   45 function_args: COMMA ID COLON ID .

    $default  reduce using rule 45 (function_args)


state 126

   44 function_args: function_args COMMA ID COLON . ID

    ID  shift, and go to state 130


state 127

   43 function_decl: FUNCTION ID LPAREN function_args RPAREN COLON ID .

    $default  reduce using rule 43 (function_decl)


state 128

   40 fields: ID COLON ID .

    $default  reduce using rule 40 (fields)


state 129

   39 fields: fields COMMA ID . COLON ID

    COLON  shift, and go to state 131


state 130

   44 function_args: function_args COMMA ID COLON ID .

    $default  reduce using rule 44 (function_args)


state 131

   39 fields: fields COMMA ID COLON . ID

    ID  shift, and go to state 132


state 132

   39 fields: fields COMMA ID COLON ID .

    $default  reduce using rule 39 (fields)
