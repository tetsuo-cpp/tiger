Grammar

    0 $accept: program $end

    1 program: exp

    2 exp: let
    3    | lvalue
    4    | lvalue ASSIGN exp
    5    | LPAREN exp_list RPAREN
    6    | NIL
    7    | INT
    8    | STRING
    9    | MINUS exp
   10    | exp PLUS exp
   11    | exp MINUS exp
   12    | exp TIMES exp
   13    | exp DIVIDE exp
   14    | exp EQ exp
   15    | exp NEQ exp
   16    | exp LT exp
   17    | exp GT exp
   18    | exp LE exp
   19    | exp GE exp
   20    | exp AND exp
   21    | exp OR exp
   22    | ID LBRACE record_args RBRACE
   23    | ID LBRACK exp RBRACK OF exp
   24    | if_exp
   25    | WHILE exp DO exp
   26    | FOR ID ASSIGN exp TO exp DO exp
   27    | BREAK
   28    | function_call

   29 let: LET decl_list IN exp_list END

   30 decl_list: decl decl_list
   31          | /* empty */

   32 exp_list: exp SEMICOLON exp_list
   33         | exp

   34 decl: type_decl
   35     | var_decl
   36     | function_decl

   37 type_decl: TYPE ID EQ type

   38 type: ID
   39     | LBRACE fields RBRACE
   40     | ARRAY OF ID

   41 fields: ID COLON ID COMMA fields
   42       | ID COLON ID

   43 var_decl: VAR ID ASSIGN exp
   44         | VAR ID COLON ID ASSIGN exp

   45 function_decl: FUNCTION ID LPAREN function_args RPAREN COLON ID EQ exp
   46              | FUNCTION ID LPAREN function_args RPAREN EQ exp

   47 function_args: function_args_list
   48              | /* empty */

   49 function_args_list: ID COLON ID COMMA function_args_list
   50                   | ID COLON ID

   51 lvalue: ID
   52       | lvalue_not_id

   53 lvalue_not_id: lvalue DOT ID
   54              | ID LBRACK exp RBRACK
   55              | lvalue_not_id LBRACK exp RBRACK

   56 record_args: ID EQ exp COMMA record_args
   57            | ID EQ exp

   58 if_exp: IF exp THEN exp
   59       | IF exp THEN exp ELSE exp

   60 function_call: ID LPAREN function_call_args RPAREN
   61              | ID LPAREN RPAREN

   62 function_call_args: exp COMMA function_call_args
   63                   | exp


Terminals, with rules where they appear

$end (0) 0
error (256)
ID (258) 22 23 26 37 38 40 41 42 43 44 45 46 49 50 51 53 54 56 57 60
    61
STRING (259) 8
INT (260) 7
COMMA (261) 41 49 56 62
COLON (262) 41 42 44 45 49 50
SEMICOLON (263) 32
LPAREN (264) 5 45 46 60 61
RPAREN (265) 5 45 46 60 61
LBRACK (266) 23 54 55
RBRACK (267) 23 54 55
LBRACE (268) 22 39
RBRACE (269) 22 39
DOT (270) 53
PLUS (271) 10
MINUS (272) 9 11
TIMES (273) 12
DIVIDE (274) 13
EQ (275) 14 37 45 46 56 57
NEQ (276) 15
LT (277) 16
LE (278) 18
GT (279) 17
GE (280) 19
AND (281) 20
OR (282) 21
ASSIGN (283) 4 26 43 44
ARRAY (284) 40
IF (285) 58 59
THEN (286) 58 59
ELSE (287) 59
WHILE (288) 25
FOR (289) 26
TO (290) 26
DO (291) 25 26
LET (292) 29
IN (293) 29
END (294) 29
OF (295) 23 40
BREAK (296) 27
NIL (297) 6
FUNCTION (298) 45 46
VAR (299) 43 44
TYPE (300) 37
UMINUS (301)


Nonterminals, with rules where they appear

$accept (47)
    on left: 0
program (48)
    on left: 1, on right: 0
exp (49)
    on left: 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22
    23 24 25 26 27 28, on right: 1 4 9 10 11 12 13 14 15 16 17 18 19
    20 21 23 25 26 32 33 43 44 45 46 54 55 56 57 58 59 62 63
let (50)
    on left: 29, on right: 2
decl_list (51)
    on left: 30 31, on right: 29 30
exp_list (52)
    on left: 32 33, on right: 5 29 32
decl (53)
    on left: 34 35 36, on right: 30
type_decl (54)
    on left: 37, on right: 34
type (55)
    on left: 38 39 40, on right: 37
fields (56)
    on left: 41 42, on right: 39 41
var_decl (57)
    on left: 43 44, on right: 35
function_decl (58)
    on left: 45 46, on right: 36
function_args (59)
    on left: 47 48, on right: 45 46
function_args_list (60)
    on left: 49 50, on right: 47 49
lvalue (61)
    on left: 51 52, on right: 3 4 53
lvalue_not_id (62)
    on left: 53 54 55, on right: 52 55
record_args (63)
    on left: 56 57, on right: 22 56
if_exp (64)
    on left: 58 59, on right: 24
function_call (65)
    on left: 60 61, on right: 28
function_call_args (66)
    on left: 62 63, on right: 60 62


state 0

    0 $accept: . program $end

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    program        go to state 12
    exp            go to state 13
    let            go to state 14
    lvalue         go to state 15
    lvalue_not_id  go to state 16
    if_exp         go to state 17
    function_call  go to state 18


state 1

   22 exp: ID . LBRACE record_args RBRACE
   23    | ID . LBRACK exp RBRACK OF exp
   51 lvalue: ID .
   54 lvalue_not_id: ID . LBRACK exp RBRACK
   60 function_call: ID . LPAREN function_call_args RPAREN
   61              | ID . LPAREN RPAREN

    LPAREN  shift, and go to state 19
    LBRACK  shift, and go to state 20
    LBRACE  shift, and go to state 21

    $default  reduce using rule 51 (lvalue)


state 2

    8 exp: STRING .

    $default  reduce using rule 8 (exp)


state 3

    7 exp: INT .

    $default  reduce using rule 7 (exp)


state 4

    5 exp: LPAREN . exp_list RPAREN

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 22
    let            go to state 14
    exp_list       go to state 23
    lvalue         go to state 15
    lvalue_not_id  go to state 16
    if_exp         go to state 17
    function_call  go to state 18


state 5

    9 exp: MINUS . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 24
    let            go to state 14
    lvalue         go to state 15
    lvalue_not_id  go to state 16
    if_exp         go to state 17
    function_call  go to state 18


state 6

   58 if_exp: IF . exp THEN exp
   59       | IF . exp THEN exp ELSE exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 25
    let            go to state 14
    lvalue         go to state 15
    lvalue_not_id  go to state 16
    if_exp         go to state 17
    function_call  go to state 18


state 7

   25 exp: WHILE . exp DO exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 26
    let            go to state 14
    lvalue         go to state 15
    lvalue_not_id  go to state 16
    if_exp         go to state 17
    function_call  go to state 18


state 8

   26 exp: FOR . ID ASSIGN exp TO exp DO exp

    ID  shift, and go to state 27


state 9

   29 let: LET . decl_list IN exp_list END

    FUNCTION  shift, and go to state 28
    VAR       shift, and go to state 29
    TYPE      shift, and go to state 30

    $default  reduce using rule 31 (decl_list)

    decl_list      go to state 31
    decl           go to state 32
    type_decl      go to state 33
    var_decl       go to state 34
    function_decl  go to state 35


state 10

   27 exp: BREAK .

    $default  reduce using rule 27 (exp)


state 11

    6 exp: NIL .

    $default  reduce using rule 6 (exp)


state 12

    0 $accept: program . $end

    $end  shift, and go to state 36


state 13

    1 program: exp .
   10 exp: exp . PLUS exp
   11    | exp . MINUS exp
   12    | exp . TIMES exp
   13    | exp . DIVIDE exp
   14    | exp . EQ exp
   15    | exp . NEQ exp
   16    | exp . LT exp
   17    | exp . GT exp
   18    | exp . LE exp
   19    | exp . GE exp
   20    | exp . AND exp
   21    | exp . OR exp

    PLUS    shift, and go to state 37
    MINUS   shift, and go to state 38
    TIMES   shift, and go to state 39
    DIVIDE  shift, and go to state 40
    EQ      shift, and go to state 41
    NEQ     shift, and go to state 42
    LT      shift, and go to state 43
    LE      shift, and go to state 44
    GT      shift, and go to state 45
    GE      shift, and go to state 46
    AND     shift, and go to state 47
    OR      shift, and go to state 48

    $default  reduce using rule 1 (program)


state 14

    2 exp: let .

    $default  reduce using rule 2 (exp)


state 15

    3 exp: lvalue .
    4    | lvalue . ASSIGN exp
   53 lvalue_not_id: lvalue . DOT ID

    DOT     shift, and go to state 49
    ASSIGN  shift, and go to state 50

    $default  reduce using rule 3 (exp)


state 16

   52 lvalue: lvalue_not_id .
   55 lvalue_not_id: lvalue_not_id . LBRACK exp RBRACK

    LBRACK  shift, and go to state 51

    $default  reduce using rule 52 (lvalue)


state 17

   24 exp: if_exp .

    $default  reduce using rule 24 (exp)


state 18

   28 exp: function_call .

    $default  reduce using rule 28 (exp)


state 19

   60 function_call: ID LPAREN . function_call_args RPAREN
   61              | ID LPAREN . RPAREN

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    RPAREN  shift, and go to state 52
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp                 go to state 53
    let                 go to state 14
    lvalue              go to state 15
    lvalue_not_id       go to state 16
    if_exp              go to state 17
    function_call       go to state 18
    function_call_args  go to state 54


state 20

   23 exp: ID LBRACK . exp RBRACK OF exp
   54 lvalue_not_id: ID LBRACK . exp RBRACK

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 55
    let            go to state 14
    lvalue         go to state 15
    lvalue_not_id  go to state 16
    if_exp         go to state 17
    function_call  go to state 18


state 21

   22 exp: ID LBRACE . record_args RBRACE

    ID  shift, and go to state 56

    record_args  go to state 57


state 22

   10 exp: exp . PLUS exp
   11    | exp . MINUS exp
   12    | exp . TIMES exp
   13    | exp . DIVIDE exp
   14    | exp . EQ exp
   15    | exp . NEQ exp
   16    | exp . LT exp
   17    | exp . GT exp
   18    | exp . LE exp
   19    | exp . GE exp
   20    | exp . AND exp
   21    | exp . OR exp
   32 exp_list: exp . SEMICOLON exp_list
   33         | exp .

    SEMICOLON  shift, and go to state 58
    PLUS       shift, and go to state 37
    MINUS      shift, and go to state 38
    TIMES      shift, and go to state 39
    DIVIDE     shift, and go to state 40
    EQ         shift, and go to state 41
    NEQ        shift, and go to state 42
    LT         shift, and go to state 43
    LE         shift, and go to state 44
    GT         shift, and go to state 45
    GE         shift, and go to state 46
    AND        shift, and go to state 47
    OR         shift, and go to state 48

    $default  reduce using rule 33 (exp_list)


state 23

    5 exp: LPAREN exp_list . RPAREN

    RPAREN  shift, and go to state 59


state 24

    9 exp: MINUS exp .
   10    | exp . PLUS exp
   11    | exp . MINUS exp
   12    | exp . TIMES exp
   13    | exp . DIVIDE exp
   14    | exp . EQ exp
   15    | exp . NEQ exp
   16    | exp . LT exp
   17    | exp . GT exp
   18    | exp . LE exp
   19    | exp . GE exp
   20    | exp . AND exp
   21    | exp . OR exp

    $default  reduce using rule 9 (exp)


state 25

   10 exp: exp . PLUS exp
   11    | exp . MINUS exp
   12    | exp . TIMES exp
   13    | exp . DIVIDE exp
   14    | exp . EQ exp
   15    | exp . NEQ exp
   16    | exp . LT exp
   17    | exp . GT exp
   18    | exp . LE exp
   19    | exp . GE exp
   20    | exp . AND exp
   21    | exp . OR exp
   58 if_exp: IF exp . THEN exp
   59       | IF exp . THEN exp ELSE exp

    PLUS    shift, and go to state 37
    MINUS   shift, and go to state 38
    TIMES   shift, and go to state 39
    DIVIDE  shift, and go to state 40
    EQ      shift, and go to state 41
    NEQ     shift, and go to state 42
    LT      shift, and go to state 43
    LE      shift, and go to state 44
    GT      shift, and go to state 45
    GE      shift, and go to state 46
    AND     shift, and go to state 47
    OR      shift, and go to state 48
    THEN    shift, and go to state 60


state 26

   10 exp: exp . PLUS exp
   11    | exp . MINUS exp
   12    | exp . TIMES exp
   13    | exp . DIVIDE exp
   14    | exp . EQ exp
   15    | exp . NEQ exp
   16    | exp . LT exp
   17    | exp . GT exp
   18    | exp . LE exp
   19    | exp . GE exp
   20    | exp . AND exp
   21    | exp . OR exp
   25    | WHILE exp . DO exp

    PLUS    shift, and go to state 37
    MINUS   shift, and go to state 38
    TIMES   shift, and go to state 39
    DIVIDE  shift, and go to state 40
    EQ      shift, and go to state 41
    NEQ     shift, and go to state 42
    LT      shift, and go to state 43
    LE      shift, and go to state 44
    GT      shift, and go to state 45
    GE      shift, and go to state 46
    AND     shift, and go to state 47
    OR      shift, and go to state 48
    DO      shift, and go to state 61


state 27

   26 exp: FOR ID . ASSIGN exp TO exp DO exp

    ASSIGN  shift, and go to state 62


state 28

   45 function_decl: FUNCTION . ID LPAREN function_args RPAREN COLON ID EQ exp
   46              | FUNCTION . ID LPAREN function_args RPAREN EQ exp

    ID  shift, and go to state 63


state 29

   43 var_decl: VAR . ID ASSIGN exp
   44         | VAR . ID COLON ID ASSIGN exp

    ID  shift, and go to state 64


state 30

   37 type_decl: TYPE . ID EQ type

    ID  shift, and go to state 65


state 31

   29 let: LET decl_list . IN exp_list END

    IN  shift, and go to state 66


state 32

   30 decl_list: decl . decl_list

    FUNCTION  shift, and go to state 28
    VAR       shift, and go to state 29
    TYPE      shift, and go to state 30

    $default  reduce using rule 31 (decl_list)

    decl_list      go to state 67
    decl           go to state 32
    type_decl      go to state 33
    var_decl       go to state 34
    function_decl  go to state 35


state 33

   34 decl: type_decl .

    $default  reduce using rule 34 (decl)


state 34

   35 decl: var_decl .

    $default  reduce using rule 35 (decl)


state 35

   36 decl: function_decl .

    $default  reduce using rule 36 (decl)


state 36

    0 $accept: program $end .

    $default  accept


state 37

   10 exp: exp PLUS . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 68
    let            go to state 14
    lvalue         go to state 15
    lvalue_not_id  go to state 16
    if_exp         go to state 17
    function_call  go to state 18


state 38

   11 exp: exp MINUS . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 69
    let            go to state 14
    lvalue         go to state 15
    lvalue_not_id  go to state 16
    if_exp         go to state 17
    function_call  go to state 18


state 39

   12 exp: exp TIMES . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 70
    let            go to state 14
    lvalue         go to state 15
    lvalue_not_id  go to state 16
    if_exp         go to state 17
    function_call  go to state 18


state 40

   13 exp: exp DIVIDE . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 71
    let            go to state 14
    lvalue         go to state 15
    lvalue_not_id  go to state 16
    if_exp         go to state 17
    function_call  go to state 18


state 41

   14 exp: exp EQ . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 72
    let            go to state 14
    lvalue         go to state 15
    lvalue_not_id  go to state 16
    if_exp         go to state 17
    function_call  go to state 18


state 42

   15 exp: exp NEQ . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 73
    let            go to state 14
    lvalue         go to state 15
    lvalue_not_id  go to state 16
    if_exp         go to state 17
    function_call  go to state 18


state 43

   16 exp: exp LT . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 74
    let            go to state 14
    lvalue         go to state 15
    lvalue_not_id  go to state 16
    if_exp         go to state 17
    function_call  go to state 18


state 44

   18 exp: exp LE . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 75
    let            go to state 14
    lvalue         go to state 15
    lvalue_not_id  go to state 16
    if_exp         go to state 17
    function_call  go to state 18


state 45

   17 exp: exp GT . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 76
    let            go to state 14
    lvalue         go to state 15
    lvalue_not_id  go to state 16
    if_exp         go to state 17
    function_call  go to state 18


state 46

   19 exp: exp GE . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 77
    let            go to state 14
    lvalue         go to state 15
    lvalue_not_id  go to state 16
    if_exp         go to state 17
    function_call  go to state 18


state 47

   20 exp: exp AND . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 78
    let            go to state 14
    lvalue         go to state 15
    lvalue_not_id  go to state 16
    if_exp         go to state 17
    function_call  go to state 18


state 48

   21 exp: exp OR . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 79
    let            go to state 14
    lvalue         go to state 15
    lvalue_not_id  go to state 16
    if_exp         go to state 17
    function_call  go to state 18


state 49

   53 lvalue_not_id: lvalue DOT . ID

    ID  shift, and go to state 80


state 50

    4 exp: lvalue ASSIGN . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 81
    let            go to state 14
    lvalue         go to state 15
    lvalue_not_id  go to state 16
    if_exp         go to state 17
    function_call  go to state 18


state 51

   55 lvalue_not_id: lvalue_not_id LBRACK . exp RBRACK

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 82
    let            go to state 14
    lvalue         go to state 15
    lvalue_not_id  go to state 16
    if_exp         go to state 17
    function_call  go to state 18


state 52

   61 function_call: ID LPAREN RPAREN .

    $default  reduce using rule 61 (function_call)


state 53

   10 exp: exp . PLUS exp
   11    | exp . MINUS exp
   12    | exp . TIMES exp
   13    | exp . DIVIDE exp
   14    | exp . EQ exp
   15    | exp . NEQ exp
   16    | exp . LT exp
   17    | exp . GT exp
   18    | exp . LE exp
   19    | exp . GE exp
   20    | exp . AND exp
   21    | exp . OR exp
   62 function_call_args: exp . COMMA function_call_args
   63                   | exp .

    COMMA   shift, and go to state 83
    PLUS    shift, and go to state 37
    MINUS   shift, and go to state 38
    TIMES   shift, and go to state 39
    DIVIDE  shift, and go to state 40
    EQ      shift, and go to state 41
    NEQ     shift, and go to state 42
    LT      shift, and go to state 43
    LE      shift, and go to state 44
    GT      shift, and go to state 45
    GE      shift, and go to state 46
    AND     shift, and go to state 47
    OR      shift, and go to state 48

    $default  reduce using rule 63 (function_call_args)


state 54

   60 function_call: ID LPAREN function_call_args . RPAREN

    RPAREN  shift, and go to state 84


state 55

   10 exp: exp . PLUS exp
   11    | exp . MINUS exp
   12    | exp . TIMES exp
   13    | exp . DIVIDE exp
   14    | exp . EQ exp
   15    | exp . NEQ exp
   16    | exp . LT exp
   17    | exp . GT exp
   18    | exp . LE exp
   19    | exp . GE exp
   20    | exp . AND exp
   21    | exp . OR exp
   23    | ID LBRACK exp . RBRACK OF exp
   54 lvalue_not_id: ID LBRACK exp . RBRACK

    RBRACK  shift, and go to state 85
    PLUS    shift, and go to state 37
    MINUS   shift, and go to state 38
    TIMES   shift, and go to state 39
    DIVIDE  shift, and go to state 40
    EQ      shift, and go to state 41
    NEQ     shift, and go to state 42
    LT      shift, and go to state 43
    LE      shift, and go to state 44
    GT      shift, and go to state 45
    GE      shift, and go to state 46
    AND     shift, and go to state 47
    OR      shift, and go to state 48


state 56

   56 record_args: ID . EQ exp COMMA record_args
   57            | ID . EQ exp

    EQ  shift, and go to state 86


state 57

   22 exp: ID LBRACE record_args . RBRACE

    RBRACE  shift, and go to state 87


state 58

   32 exp_list: exp SEMICOLON . exp_list

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 22
    let            go to state 14
    exp_list       go to state 88
    lvalue         go to state 15
    lvalue_not_id  go to state 16
    if_exp         go to state 17
    function_call  go to state 18


state 59

    5 exp: LPAREN exp_list RPAREN .

    $default  reduce using rule 5 (exp)


state 60

   58 if_exp: IF exp THEN . exp
   59       | IF exp THEN . exp ELSE exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 89
    let            go to state 14
    lvalue         go to state 15
    lvalue_not_id  go to state 16
    if_exp         go to state 17
    function_call  go to state 18


state 61

   25 exp: WHILE exp DO . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 90
    let            go to state 14
    lvalue         go to state 15
    lvalue_not_id  go to state 16
    if_exp         go to state 17
    function_call  go to state 18


state 62

   26 exp: FOR ID ASSIGN . exp TO exp DO exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 91
    let            go to state 14
    lvalue         go to state 15
    lvalue_not_id  go to state 16
    if_exp         go to state 17
    function_call  go to state 18


state 63

   45 function_decl: FUNCTION ID . LPAREN function_args RPAREN COLON ID EQ exp
   46              | FUNCTION ID . LPAREN function_args RPAREN EQ exp

    LPAREN  shift, and go to state 92


state 64

   43 var_decl: VAR ID . ASSIGN exp
   44         | VAR ID . COLON ID ASSIGN exp

    COLON   shift, and go to state 93
    ASSIGN  shift, and go to state 94


state 65

   37 type_decl: TYPE ID . EQ type

    EQ  shift, and go to state 95


state 66

   29 let: LET decl_list IN . exp_list END

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 22
    let            go to state 14
    exp_list       go to state 96
    lvalue         go to state 15
    lvalue_not_id  go to state 16
    if_exp         go to state 17
    function_call  go to state 18


state 67

   30 decl_list: decl decl_list .

    $default  reduce using rule 30 (decl_list)


state 68

   10 exp: exp . PLUS exp
   10    | exp PLUS exp .
   11    | exp . MINUS exp
   12    | exp . TIMES exp
   13    | exp . DIVIDE exp
   14    | exp . EQ exp
   15    | exp . NEQ exp
   16    | exp . LT exp
   17    | exp . GT exp
   18    | exp . LE exp
   19    | exp . GE exp
   20    | exp . AND exp
   21    | exp . OR exp

    TIMES   shift, and go to state 39
    DIVIDE  shift, and go to state 40

    $default  reduce using rule 10 (exp)


state 69

   10 exp: exp . PLUS exp
   11    | exp . MINUS exp
   11    | exp MINUS exp .
   12    | exp . TIMES exp
   13    | exp . DIVIDE exp
   14    | exp . EQ exp
   15    | exp . NEQ exp
   16    | exp . LT exp
   17    | exp . GT exp
   18    | exp . LE exp
   19    | exp . GE exp
   20    | exp . AND exp
   21    | exp . OR exp

    TIMES   shift, and go to state 39
    DIVIDE  shift, and go to state 40

    $default  reduce using rule 11 (exp)


state 70

   10 exp: exp . PLUS exp
   11    | exp . MINUS exp
   12    | exp . TIMES exp
   12    | exp TIMES exp .
   13    | exp . DIVIDE exp
   14    | exp . EQ exp
   15    | exp . NEQ exp
   16    | exp . LT exp
   17    | exp . GT exp
   18    | exp . LE exp
   19    | exp . GE exp
   20    | exp . AND exp
   21    | exp . OR exp

    $default  reduce using rule 12 (exp)


state 71

   10 exp: exp . PLUS exp
   11    | exp . MINUS exp
   12    | exp . TIMES exp
   13    | exp . DIVIDE exp
   13    | exp DIVIDE exp .
   14    | exp . EQ exp
   15    | exp . NEQ exp
   16    | exp . LT exp
   17    | exp . GT exp
   18    | exp . LE exp
   19    | exp . GE exp
   20    | exp . AND exp
   21    | exp . OR exp

    $default  reduce using rule 13 (exp)


state 72

   10 exp: exp . PLUS exp
   11    | exp . MINUS exp
   12    | exp . TIMES exp
   13    | exp . DIVIDE exp
   14    | exp . EQ exp
   14    | exp EQ exp .
   15    | exp . NEQ exp
   16    | exp . LT exp
   17    | exp . GT exp
   18    | exp . LE exp
   19    | exp . GE exp
   20    | exp . AND exp
   21    | exp . OR exp

    PLUS    shift, and go to state 37
    MINUS   shift, and go to state 38
    TIMES   shift, and go to state 39
    DIVIDE  shift, and go to state 40

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 14 (exp)


state 73

   10 exp: exp . PLUS exp
   11    | exp . MINUS exp
   12    | exp . TIMES exp
   13    | exp . DIVIDE exp
   14    | exp . EQ exp
   15    | exp . NEQ exp
   15    | exp NEQ exp .
   16    | exp . LT exp
   17    | exp . GT exp
   18    | exp . LE exp
   19    | exp . GE exp
   20    | exp . AND exp
   21    | exp . OR exp

    PLUS    shift, and go to state 37
    MINUS   shift, and go to state 38
    TIMES   shift, and go to state 39
    DIVIDE  shift, and go to state 40

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 15 (exp)


state 74

   10 exp: exp . PLUS exp
   11    | exp . MINUS exp
   12    | exp . TIMES exp
   13    | exp . DIVIDE exp
   14    | exp . EQ exp
   15    | exp . NEQ exp
   16    | exp . LT exp
   16    | exp LT exp .
   17    | exp . GT exp
   18    | exp . LE exp
   19    | exp . GE exp
   20    | exp . AND exp
   21    | exp . OR exp

    PLUS    shift, and go to state 37
    MINUS   shift, and go to state 38
    TIMES   shift, and go to state 39
    DIVIDE  shift, and go to state 40

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 16 (exp)


state 75

   10 exp: exp . PLUS exp
   11    | exp . MINUS exp
   12    | exp . TIMES exp
   13    | exp . DIVIDE exp
   14    | exp . EQ exp
   15    | exp . NEQ exp
   16    | exp . LT exp
   17    | exp . GT exp
   18    | exp . LE exp
   18    | exp LE exp .
   19    | exp . GE exp
   20    | exp . AND exp
   21    | exp . OR exp

    PLUS    shift, and go to state 37
    MINUS   shift, and go to state 38
    TIMES   shift, and go to state 39
    DIVIDE  shift, and go to state 40

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 18 (exp)


state 76

   10 exp: exp . PLUS exp
   11    | exp . MINUS exp
   12    | exp . TIMES exp
   13    | exp . DIVIDE exp
   14    | exp . EQ exp
   15    | exp . NEQ exp
   16    | exp . LT exp
   17    | exp . GT exp
   17    | exp GT exp .
   18    | exp . LE exp
   19    | exp . GE exp
   20    | exp . AND exp
   21    | exp . OR exp

    PLUS    shift, and go to state 37
    MINUS   shift, and go to state 38
    TIMES   shift, and go to state 39
    DIVIDE  shift, and go to state 40

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 17 (exp)


state 77

   10 exp: exp . PLUS exp
   11    | exp . MINUS exp
   12    | exp . TIMES exp
   13    | exp . DIVIDE exp
   14    | exp . EQ exp
   15    | exp . NEQ exp
   16    | exp . LT exp
   17    | exp . GT exp
   18    | exp . LE exp
   19    | exp . GE exp
   19    | exp GE exp .
   20    | exp . AND exp
   21    | exp . OR exp

    PLUS    shift, and go to state 37
    MINUS   shift, and go to state 38
    TIMES   shift, and go to state 39
    DIVIDE  shift, and go to state 40

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 19 (exp)


state 78

   10 exp: exp . PLUS exp
   11    | exp . MINUS exp
   12    | exp . TIMES exp
   13    | exp . DIVIDE exp
   14    | exp . EQ exp
   15    | exp . NEQ exp
   16    | exp . LT exp
   17    | exp . GT exp
   18    | exp . LE exp
   19    | exp . GE exp
   20    | exp . AND exp
   20    | exp AND exp .
   21    | exp . OR exp

    PLUS    shift, and go to state 37
    MINUS   shift, and go to state 38
    TIMES   shift, and go to state 39
    DIVIDE  shift, and go to state 40
    EQ      shift, and go to state 41
    NEQ     shift, and go to state 42
    LT      shift, and go to state 43
    LE      shift, and go to state 44
    GT      shift, and go to state 45
    GE      shift, and go to state 46

    $default  reduce using rule 20 (exp)


state 79

   10 exp: exp . PLUS exp
   11    | exp . MINUS exp
   12    | exp . TIMES exp
   13    | exp . DIVIDE exp
   14    | exp . EQ exp
   15    | exp . NEQ exp
   16    | exp . LT exp
   17    | exp . GT exp
   18    | exp . LE exp
   19    | exp . GE exp
   20    | exp . AND exp
   21    | exp . OR exp
   21    | exp OR exp .

    PLUS    shift, and go to state 37
    MINUS   shift, and go to state 38
    TIMES   shift, and go to state 39
    DIVIDE  shift, and go to state 40
    EQ      shift, and go to state 41
    NEQ     shift, and go to state 42
    LT      shift, and go to state 43
    LE      shift, and go to state 44
    GT      shift, and go to state 45
    GE      shift, and go to state 46

    $default  reduce using rule 21 (exp)


state 80

   53 lvalue_not_id: lvalue DOT ID .

    $default  reduce using rule 53 (lvalue_not_id)


state 81

    4 exp: lvalue ASSIGN exp .
   10    | exp . PLUS exp
   11    | exp . MINUS exp
   12    | exp . TIMES exp
   13    | exp . DIVIDE exp
   14    | exp . EQ exp
   15    | exp . NEQ exp
   16    | exp . LT exp
   17    | exp . GT exp
   18    | exp . LE exp
   19    | exp . GE exp
   20    | exp . AND exp
   21    | exp . OR exp

    PLUS    shift, and go to state 37
    MINUS   shift, and go to state 38
    TIMES   shift, and go to state 39
    DIVIDE  shift, and go to state 40
    EQ      shift, and go to state 41
    NEQ     shift, and go to state 42
    LT      shift, and go to state 43
    LE      shift, and go to state 44
    GT      shift, and go to state 45
    GE      shift, and go to state 46
    AND     shift, and go to state 47
    OR      shift, and go to state 48

    $default  reduce using rule 4 (exp)


state 82

   10 exp: exp . PLUS exp
   11    | exp . MINUS exp
   12    | exp . TIMES exp
   13    | exp . DIVIDE exp
   14    | exp . EQ exp
   15    | exp . NEQ exp
   16    | exp . LT exp
   17    | exp . GT exp
   18    | exp . LE exp
   19    | exp . GE exp
   20    | exp . AND exp
   21    | exp . OR exp
   55 lvalue_not_id: lvalue_not_id LBRACK exp . RBRACK

    RBRACK  shift, and go to state 97
    PLUS    shift, and go to state 37
    MINUS   shift, and go to state 38
    TIMES   shift, and go to state 39
    DIVIDE  shift, and go to state 40
    EQ      shift, and go to state 41
    NEQ     shift, and go to state 42
    LT      shift, and go to state 43
    LE      shift, and go to state 44
    GT      shift, and go to state 45
    GE      shift, and go to state 46
    AND     shift, and go to state 47
    OR      shift, and go to state 48


state 83

   62 function_call_args: exp COMMA . function_call_args

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp                 go to state 53
    let                 go to state 14
    lvalue              go to state 15
    lvalue_not_id       go to state 16
    if_exp              go to state 17
    function_call       go to state 18
    function_call_args  go to state 98


state 84

   60 function_call: ID LPAREN function_call_args RPAREN .

    $default  reduce using rule 60 (function_call)


state 85

   23 exp: ID LBRACK exp RBRACK . OF exp
   54 lvalue_not_id: ID LBRACK exp RBRACK .

    OF  shift, and go to state 99

    $default  reduce using rule 54 (lvalue_not_id)


state 86

   56 record_args: ID EQ . exp COMMA record_args
   57            | ID EQ . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 100
    let            go to state 14
    lvalue         go to state 15
    lvalue_not_id  go to state 16
    if_exp         go to state 17
    function_call  go to state 18


state 87

   22 exp: ID LBRACE record_args RBRACE .

    $default  reduce using rule 22 (exp)


state 88

   32 exp_list: exp SEMICOLON exp_list .

    $default  reduce using rule 32 (exp_list)


state 89

   10 exp: exp . PLUS exp
   11    | exp . MINUS exp
   12    | exp . TIMES exp
   13    | exp . DIVIDE exp
   14    | exp . EQ exp
   15    | exp . NEQ exp
   16    | exp . LT exp
   17    | exp . GT exp
   18    | exp . LE exp
   19    | exp . GE exp
   20    | exp . AND exp
   21    | exp . OR exp
   58 if_exp: IF exp THEN exp .
   59       | IF exp THEN exp . ELSE exp

    ELSE  shift, and go to state 101

    $default  reduce using rule 58 (if_exp)


state 90

   10 exp: exp . PLUS exp
   11    | exp . MINUS exp
   12    | exp . TIMES exp
   13    | exp . DIVIDE exp
   14    | exp . EQ exp
   15    | exp . NEQ exp
   16    | exp . LT exp
   17    | exp . GT exp
   18    | exp . LE exp
   19    | exp . GE exp
   20    | exp . AND exp
   21    | exp . OR exp
   25    | WHILE exp DO exp .

    $default  reduce using rule 25 (exp)


state 91

   10 exp: exp . PLUS exp
   11    | exp . MINUS exp
   12    | exp . TIMES exp
   13    | exp . DIVIDE exp
   14    | exp . EQ exp
   15    | exp . NEQ exp
   16    | exp . LT exp
   17    | exp . GT exp
   18    | exp . LE exp
   19    | exp . GE exp
   20    | exp . AND exp
   21    | exp . OR exp
   26    | FOR ID ASSIGN exp . TO exp DO exp

    PLUS    shift, and go to state 37
    MINUS   shift, and go to state 38
    TIMES   shift, and go to state 39
    DIVIDE  shift, and go to state 40
    EQ      shift, and go to state 41
    NEQ     shift, and go to state 42
    LT      shift, and go to state 43
    LE      shift, and go to state 44
    GT      shift, and go to state 45
    GE      shift, and go to state 46
    AND     shift, and go to state 47
    OR      shift, and go to state 48
    TO      shift, and go to state 102


state 92

   45 function_decl: FUNCTION ID LPAREN . function_args RPAREN COLON ID EQ exp
   46              | FUNCTION ID LPAREN . function_args RPAREN EQ exp

    ID  shift, and go to state 103

    $default  reduce using rule 48 (function_args)

    function_args       go to state 104
    function_args_list  go to state 105


state 93

   44 var_decl: VAR ID COLON . ID ASSIGN exp

    ID  shift, and go to state 106


state 94

   43 var_decl: VAR ID ASSIGN . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 107
    let            go to state 14
    lvalue         go to state 15
    lvalue_not_id  go to state 16
    if_exp         go to state 17
    function_call  go to state 18


state 95

   37 type_decl: TYPE ID EQ . type

    ID      shift, and go to state 108
    LBRACE  shift, and go to state 109
    ARRAY   shift, and go to state 110

    type  go to state 111


state 96

   29 let: LET decl_list IN exp_list . END

    END  shift, and go to state 112


state 97

   55 lvalue_not_id: lvalue_not_id LBRACK exp RBRACK .

    $default  reduce using rule 55 (lvalue_not_id)


state 98

   62 function_call_args: exp COMMA function_call_args .

    $default  reduce using rule 62 (function_call_args)


state 99

   23 exp: ID LBRACK exp RBRACK OF . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 113
    let            go to state 14
    lvalue         go to state 15
    lvalue_not_id  go to state 16
    if_exp         go to state 17
    function_call  go to state 18


state 100

   10 exp: exp . PLUS exp
   11    | exp . MINUS exp
   12    | exp . TIMES exp
   13    | exp . DIVIDE exp
   14    | exp . EQ exp
   15    | exp . NEQ exp
   16    | exp . LT exp
   17    | exp . GT exp
   18    | exp . LE exp
   19    | exp . GE exp
   20    | exp . AND exp
   21    | exp . OR exp
   56 record_args: ID EQ exp . COMMA record_args
   57            | ID EQ exp .

    COMMA   shift, and go to state 114
    PLUS    shift, and go to state 37
    MINUS   shift, and go to state 38
    TIMES   shift, and go to state 39
    DIVIDE  shift, and go to state 40
    EQ      shift, and go to state 41
    NEQ     shift, and go to state 42
    LT      shift, and go to state 43
    LE      shift, and go to state 44
    GT      shift, and go to state 45
    GE      shift, and go to state 46
    AND     shift, and go to state 47
    OR      shift, and go to state 48

    $default  reduce using rule 57 (record_args)


state 101

   59 if_exp: IF exp THEN exp ELSE . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 115
    let            go to state 14
    lvalue         go to state 15
    lvalue_not_id  go to state 16
    if_exp         go to state 17
    function_call  go to state 18


state 102

   26 exp: FOR ID ASSIGN exp TO . exp DO exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 116
    let            go to state 14
    lvalue         go to state 15
    lvalue_not_id  go to state 16
    if_exp         go to state 17
    function_call  go to state 18


state 103

   49 function_args_list: ID . COLON ID COMMA function_args_list
   50                   | ID . COLON ID

    COLON  shift, and go to state 117


state 104

   45 function_decl: FUNCTION ID LPAREN function_args . RPAREN COLON ID EQ exp
   46              | FUNCTION ID LPAREN function_args . RPAREN EQ exp

    RPAREN  shift, and go to state 118


state 105

   47 function_args: function_args_list .

    $default  reduce using rule 47 (function_args)


state 106

   44 var_decl: VAR ID COLON ID . ASSIGN exp

    ASSIGN  shift, and go to state 119


state 107

   10 exp: exp . PLUS exp
   11    | exp . MINUS exp
   12    | exp . TIMES exp
   13    | exp . DIVIDE exp
   14    | exp . EQ exp
   15    | exp . NEQ exp
   16    | exp . LT exp
   17    | exp . GT exp
   18    | exp . LE exp
   19    | exp . GE exp
   20    | exp . AND exp
   21    | exp . OR exp
   43 var_decl: VAR ID ASSIGN exp .

    PLUS    shift, and go to state 37
    MINUS   shift, and go to state 38
    TIMES   shift, and go to state 39
    DIVIDE  shift, and go to state 40
    EQ      shift, and go to state 41
    NEQ     shift, and go to state 42
    LT      shift, and go to state 43
    LE      shift, and go to state 44
    GT      shift, and go to state 45
    GE      shift, and go to state 46
    AND     shift, and go to state 47
    OR      shift, and go to state 48

    $default  reduce using rule 43 (var_decl)


state 108

   38 type: ID .

    $default  reduce using rule 38 (type)


state 109

   39 type: LBRACE . fields RBRACE

    ID  shift, and go to state 120

    fields  go to state 121


state 110

   40 type: ARRAY . OF ID

    OF  shift, and go to state 122


state 111

   37 type_decl: TYPE ID EQ type .

    $default  reduce using rule 37 (type_decl)


state 112

   29 let: LET decl_list IN exp_list END .

    $default  reduce using rule 29 (let)


state 113

   10 exp: exp . PLUS exp
   11    | exp . MINUS exp
   12    | exp . TIMES exp
   13    | exp . DIVIDE exp
   14    | exp . EQ exp
   15    | exp . NEQ exp
   16    | exp . LT exp
   17    | exp . GT exp
   18    | exp . LE exp
   19    | exp . GE exp
   20    | exp . AND exp
   21    | exp . OR exp
   23    | ID LBRACK exp RBRACK OF exp .

    $default  reduce using rule 23 (exp)


state 114

   56 record_args: ID EQ exp COMMA . record_args

    ID  shift, and go to state 56

    record_args  go to state 123


state 115

   10 exp: exp . PLUS exp
   11    | exp . MINUS exp
   12    | exp . TIMES exp
   13    | exp . DIVIDE exp
   14    | exp . EQ exp
   15    | exp . NEQ exp
   16    | exp . LT exp
   17    | exp . GT exp
   18    | exp . LE exp
   19    | exp . GE exp
   20    | exp . AND exp
   21    | exp . OR exp
   59 if_exp: IF exp THEN exp ELSE exp .

    $default  reduce using rule 59 (if_exp)


state 116

   10 exp: exp . PLUS exp
   11    | exp . MINUS exp
   12    | exp . TIMES exp
   13    | exp . DIVIDE exp
   14    | exp . EQ exp
   15    | exp . NEQ exp
   16    | exp . LT exp
   17    | exp . GT exp
   18    | exp . LE exp
   19    | exp . GE exp
   20    | exp . AND exp
   21    | exp . OR exp
   26    | FOR ID ASSIGN exp TO exp . DO exp

    PLUS    shift, and go to state 37
    MINUS   shift, and go to state 38
    TIMES   shift, and go to state 39
    DIVIDE  shift, and go to state 40
    EQ      shift, and go to state 41
    NEQ     shift, and go to state 42
    LT      shift, and go to state 43
    LE      shift, and go to state 44
    GT      shift, and go to state 45
    GE      shift, and go to state 46
    AND     shift, and go to state 47
    OR      shift, and go to state 48
    DO      shift, and go to state 124


state 117

   49 function_args_list: ID COLON . ID COMMA function_args_list
   50                   | ID COLON . ID

    ID  shift, and go to state 125


state 118

   45 function_decl: FUNCTION ID LPAREN function_args RPAREN . COLON ID EQ exp
   46              | FUNCTION ID LPAREN function_args RPAREN . EQ exp

    COLON  shift, and go to state 126
    EQ     shift, and go to state 127


state 119

   44 var_decl: VAR ID COLON ID ASSIGN . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 128
    let            go to state 14
    lvalue         go to state 15
    lvalue_not_id  go to state 16
    if_exp         go to state 17
    function_call  go to state 18


state 120

   41 fields: ID . COLON ID COMMA fields
   42       | ID . COLON ID

    COLON  shift, and go to state 129


state 121

   39 type: LBRACE fields . RBRACE

    RBRACE  shift, and go to state 130


state 122

   40 type: ARRAY OF . ID

    ID  shift, and go to state 131


state 123

   56 record_args: ID EQ exp COMMA record_args .

    $default  reduce using rule 56 (record_args)


state 124

   26 exp: FOR ID ASSIGN exp TO exp DO . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 132
    let            go to state 14
    lvalue         go to state 15
    lvalue_not_id  go to state 16
    if_exp         go to state 17
    function_call  go to state 18


state 125

   49 function_args_list: ID COLON ID . COMMA function_args_list
   50                   | ID COLON ID .

    COMMA  shift, and go to state 133

    $default  reduce using rule 50 (function_args_list)


state 126

   45 function_decl: FUNCTION ID LPAREN function_args RPAREN COLON . ID EQ exp

    ID  shift, and go to state 134


state 127

   46 function_decl: FUNCTION ID LPAREN function_args RPAREN EQ . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 135
    let            go to state 14
    lvalue         go to state 15
    lvalue_not_id  go to state 16
    if_exp         go to state 17
    function_call  go to state 18


state 128

   10 exp: exp . PLUS exp
   11    | exp . MINUS exp
   12    | exp . TIMES exp
   13    | exp . DIVIDE exp
   14    | exp . EQ exp
   15    | exp . NEQ exp
   16    | exp . LT exp
   17    | exp . GT exp
   18    | exp . LE exp
   19    | exp . GE exp
   20    | exp . AND exp
   21    | exp . OR exp
   44 var_decl: VAR ID COLON ID ASSIGN exp .

    PLUS    shift, and go to state 37
    MINUS   shift, and go to state 38
    TIMES   shift, and go to state 39
    DIVIDE  shift, and go to state 40
    EQ      shift, and go to state 41
    NEQ     shift, and go to state 42
    LT      shift, and go to state 43
    LE      shift, and go to state 44
    GT      shift, and go to state 45
    GE      shift, and go to state 46
    AND     shift, and go to state 47
    OR      shift, and go to state 48

    $default  reduce using rule 44 (var_decl)


state 129

   41 fields: ID COLON . ID COMMA fields
   42       | ID COLON . ID

    ID  shift, and go to state 136


state 130

   39 type: LBRACE fields RBRACE .

    $default  reduce using rule 39 (type)


state 131

   40 type: ARRAY OF ID .

    $default  reduce using rule 40 (type)


state 132

   10 exp: exp . PLUS exp
   11    | exp . MINUS exp
   12    | exp . TIMES exp
   13    | exp . DIVIDE exp
   14    | exp . EQ exp
   15    | exp . NEQ exp
   16    | exp . LT exp
   17    | exp . GT exp
   18    | exp . LE exp
   19    | exp . GE exp
   20    | exp . AND exp
   21    | exp . OR exp
   26    | FOR ID ASSIGN exp TO exp DO exp .

    $default  reduce using rule 26 (exp)


state 133

   49 function_args_list: ID COLON ID COMMA . function_args_list

    ID  shift, and go to state 103

    function_args_list  go to state 137


state 134

   45 function_decl: FUNCTION ID LPAREN function_args RPAREN COLON ID . EQ exp

    EQ  shift, and go to state 138


state 135

   10 exp: exp . PLUS exp
   11    | exp . MINUS exp
   12    | exp . TIMES exp
   13    | exp . DIVIDE exp
   14    | exp . EQ exp
   15    | exp . NEQ exp
   16    | exp . LT exp
   17    | exp . GT exp
   18    | exp . LE exp
   19    | exp . GE exp
   20    | exp . AND exp
   21    | exp . OR exp
   46 function_decl: FUNCTION ID LPAREN function_args RPAREN EQ exp .

    PLUS    shift, and go to state 37
    MINUS   shift, and go to state 38
    TIMES   shift, and go to state 39
    DIVIDE  shift, and go to state 40
    EQ      shift, and go to state 41
    NEQ     shift, and go to state 42
    LT      shift, and go to state 43
    LE      shift, and go to state 44
    GT      shift, and go to state 45
    GE      shift, and go to state 46
    AND     shift, and go to state 47
    OR      shift, and go to state 48

    $default  reduce using rule 46 (function_decl)


state 136

   41 fields: ID COLON ID . COMMA fields
   42       | ID COLON ID .

    COMMA  shift, and go to state 139

    $default  reduce using rule 42 (fields)


state 137

   49 function_args_list: ID COLON ID COMMA function_args_list .

    $default  reduce using rule 49 (function_args_list)


state 138

   45 function_decl: FUNCTION ID LPAREN function_args RPAREN COLON ID EQ . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 140
    let            go to state 14
    lvalue         go to state 15
    lvalue_not_id  go to state 16
    if_exp         go to state 17
    function_call  go to state 18


state 139

   41 fields: ID COLON ID COMMA . fields

    ID  shift, and go to state 120

    fields  go to state 141


state 140

   10 exp: exp . PLUS exp
   11    | exp . MINUS exp
   12    | exp . TIMES exp
   13    | exp . DIVIDE exp
   14    | exp . EQ exp
   15    | exp . NEQ exp
   16    | exp . LT exp
   17    | exp . GT exp
   18    | exp . LE exp
   19    | exp . GE exp
   20    | exp . AND exp
   21    | exp . OR exp
   45 function_decl: FUNCTION ID LPAREN function_args RPAREN COLON ID EQ exp .

    PLUS    shift, and go to state 37
    MINUS   shift, and go to state 38
    TIMES   shift, and go to state 39
    DIVIDE  shift, and go to state 40
    EQ      shift, and go to state 41
    NEQ     shift, and go to state 42
    LT      shift, and go to state 43
    LE      shift, and go to state 44
    GT      shift, and go to state 45
    GE      shift, and go to state 46
    AND     shift, and go to state 47
    OR      shift, and go to state 48

    $default  reduce using rule 45 (function_decl)


state 141

   41 fields: ID COLON ID COMMA fields .

    $default  reduce using rule 41 (fields)
