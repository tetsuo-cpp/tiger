Grammar

    0 $accept: program $end

    1 program: exp

    2 exp: let
    3    | lvalue
    4    | lvalue ASSIGN exp
    5    | LPAREN exp_list RPAREN
    6    | NIL
    7    | INT
    8    | STRING
    9    | MINUS exp
   10    | bin_op
   11    | record
   12    | array
   13    | if_exp
   14    | while_loop
   15    | for_loop
   16    | BREAK
   17    | function_call

   18 let: LET decl_list IN exp_list END

   19 decl_list: decl decl_list
   20          | error decl_list
   21          | /* empty */

   22 exp_list: exp SEMICOLON exp_list
   23         | error SEMICOLON exp_list
   24         | exp

   25 decl: type_decl
   26     | var_decl
   27     | function_decl

   28 type_decl: TYPE ID EQ type_id

   29 type_id: ID
   30        | LBRACE fields RBRACE
   31        | ARRAY OF ID

   32 fields: ID COLON ID COMMA fields
   33       | ID COLON ID

   34 var_decl: VAR ID ASSIGN exp
   35         | VAR ID COLON ID ASSIGN exp

   36 function_decl: FUNCTION ID LPAREN function_args RPAREN COLON ID EQ exp
   37              | FUNCTION ID LPAREN function_args RPAREN EQ exp

   38 function_args: function_args_list
   39              | /* empty */

   40 function_args_list: ID COLON ID COMMA function_args_list
   41                   | ID COLON ID

   42 lvalue: ID
   43       | lvalue_not_id

   44 lvalue_not_id: lvalue DOT ID
   45              | ID LBRACK exp RBRACK
   46              | lvalue_not_id LBRACK exp RBRACK

   47 bin_op: exp PLUS exp
   48       | exp MINUS exp
   49       | exp TIMES exp
   50       | exp DIVIDE exp
   51       | exp EQ exp
   52       | exp NEQ exp
   53       | exp LT exp
   54       | exp GT exp
   55       | exp LE exp
   56       | exp GE exp
   57       | exp AND exp
   58       | exp OR exp

   59 record: ID LBRACE record_args RBRACE

   60 record_args: ID EQ exp COMMA record_args
   61            | ID EQ exp

   62 array: ID LBRACK exp RBRACK OF exp

   63 if_exp: IF exp THEN exp
   64       | IF exp THEN exp ELSE exp

   65 while_loop: WHILE exp DO exp

   66 for_loop: FOR ID ASSIGN exp TO exp DO exp

   67 function_call: ID LPAREN function_call_args RPAREN
   68              | ID LPAREN RPAREN

   69 function_call_args: exp COMMA function_call_args
   70                   | exp


Terminals, with rules where they appear

$end (0) 0
error (256) 20 23
ID (258) 28 29 31 32 33 34 35 36 37 40 41 42 44 45 59 60 61 62 66 67
    68
STRING (259) 8
INT (260) 7
COMMA (261) 32 40 60 69
COLON (262) 32 33 35 36 40 41
SEMICOLON (263) 22 23
LPAREN (264) 5 36 37 67 68
RPAREN (265) 5 36 37 67 68
LBRACK (266) 45 46 62
RBRACK (267) 45 46 62
LBRACE (268) 30 59
RBRACE (269) 30 59
DOT (270) 44
PLUS (271) 47
MINUS (272) 9 48
TIMES (273) 49
DIVIDE (274) 50
EQ (275) 28 36 37 51 60 61
NEQ (276) 52
LT (277) 53
LE (278) 55
GT (279) 54
GE (280) 56
AND (281) 57
OR (282) 58
ASSIGN (283) 4 34 35 66
ARRAY (284) 31
IF (285) 63 64
THEN (286) 63 64
ELSE (287) 64
WHILE (288) 65
FOR (289) 66
TO (290) 66
DO (291) 65 66
LET (292) 18
IN (293) 18
END (294) 18
OF (295) 31 62
BREAK (296) 16
NIL (297) 6
FUNCTION (298) 36 37
VAR (299) 34 35
TYPE (300) 28
UMINUS (301)


Nonterminals, with rules where they appear

$accept (47)
    on left: 0
program (48)
    on left: 1, on right: 0
exp (49)
    on left: 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17,
    on right: 1 4 9 22 24 34 35 36 37 45 46 47 48 49 50 51 52 53 54
    55 56 57 58 60 61 62 63 64 65 66 69 70
let (50)
    on left: 18, on right: 2
decl_list (51)
    on left: 19 20 21, on right: 18 19 20
exp_list (52)
    on left: 22 23 24, on right: 5 18 22 23
decl (53)
    on left: 25 26 27, on right: 19
type_decl (54)
    on left: 28, on right: 25
type_id (55)
    on left: 29 30 31, on right: 28
fields (56)
    on left: 32 33, on right: 30 32
var_decl (57)
    on left: 34 35, on right: 26
function_decl (58)
    on left: 36 37, on right: 27
function_args (59)
    on left: 38 39, on right: 36 37
function_args_list (60)
    on left: 40 41, on right: 38 40
lvalue (61)
    on left: 42 43, on right: 3 4 44
lvalue_not_id (62)
    on left: 44 45 46, on right: 43 46
bin_op (63)
    on left: 47 48 49 50 51 52 53 54 55 56 57 58, on right: 10
record (64)
    on left: 59, on right: 11
record_args (65)
    on left: 60 61, on right: 59 60
array (66)
    on left: 62, on right: 12
if_exp (67)
    on left: 63 64, on right: 13
while_loop (68)
    on left: 65, on right: 14
for_loop (69)
    on left: 66, on right: 15
function_call (70)
    on left: 67 68, on right: 17
function_call_args (71)
    on left: 69 70, on right: 67 69


state 0

    0 $accept: . program $end

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    program        go to state 12
    exp            go to state 13
    let            go to state 14
    lvalue         go to state 15
    lvalue_not_id  go to state 16
    bin_op         go to state 17
    record         go to state 18
    array          go to state 19
    if_exp         go to state 20
    while_loop     go to state 21
    for_loop       go to state 22
    function_call  go to state 23


state 1

   42 lvalue: ID .
   45 lvalue_not_id: ID . LBRACK exp RBRACK
   59 record: ID . LBRACE record_args RBRACE
   62 array: ID . LBRACK exp RBRACK OF exp
   67 function_call: ID . LPAREN function_call_args RPAREN
   68              | ID . LPAREN RPAREN

    LPAREN  shift, and go to state 24
    LBRACK  shift, and go to state 25
    LBRACE  shift, and go to state 26

    $default  reduce using rule 42 (lvalue)


state 2

    8 exp: STRING .

    $default  reduce using rule 8 (exp)


state 3

    7 exp: INT .

    $default  reduce using rule 7 (exp)


state 4

    5 exp: LPAREN . exp_list RPAREN

    error   shift, and go to state 27
    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 28
    let            go to state 14
    exp_list       go to state 29
    lvalue         go to state 15
    lvalue_not_id  go to state 16
    bin_op         go to state 17
    record         go to state 18
    array          go to state 19
    if_exp         go to state 20
    while_loop     go to state 21
    for_loop       go to state 22
    function_call  go to state 23


state 5

    9 exp: MINUS . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 30
    let            go to state 14
    lvalue         go to state 15
    lvalue_not_id  go to state 16
    bin_op         go to state 17
    record         go to state 18
    array          go to state 19
    if_exp         go to state 20
    while_loop     go to state 21
    for_loop       go to state 22
    function_call  go to state 23


state 6

   63 if_exp: IF . exp THEN exp
   64       | IF . exp THEN exp ELSE exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 31
    let            go to state 14
    lvalue         go to state 15
    lvalue_not_id  go to state 16
    bin_op         go to state 17
    record         go to state 18
    array          go to state 19
    if_exp         go to state 20
    while_loop     go to state 21
    for_loop       go to state 22
    function_call  go to state 23


state 7

   65 while_loop: WHILE . exp DO exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 32
    let            go to state 14
    lvalue         go to state 15
    lvalue_not_id  go to state 16
    bin_op         go to state 17
    record         go to state 18
    array          go to state 19
    if_exp         go to state 20
    while_loop     go to state 21
    for_loop       go to state 22
    function_call  go to state 23


state 8

   66 for_loop: FOR . ID ASSIGN exp TO exp DO exp

    ID  shift, and go to state 33


state 9

   18 let: LET . decl_list IN exp_list END

    error     shift, and go to state 34
    FUNCTION  shift, and go to state 35
    VAR       shift, and go to state 36
    TYPE      shift, and go to state 37

    IN  reduce using rule 21 (decl_list)

    decl_list      go to state 38
    decl           go to state 39
    type_decl      go to state 40
    var_decl       go to state 41
    function_decl  go to state 42


state 10

   16 exp: BREAK .

    $default  reduce using rule 16 (exp)


state 11

    6 exp: NIL .

    $default  reduce using rule 6 (exp)


state 12

    0 $accept: program . $end

    $end  shift, and go to state 43


state 13

    1 program: exp .
   47 bin_op: exp . PLUS exp
   48       | exp . MINUS exp
   49       | exp . TIMES exp
   50       | exp . DIVIDE exp
   51       | exp . EQ exp
   52       | exp . NEQ exp
   53       | exp . LT exp
   54       | exp . GT exp
   55       | exp . LE exp
   56       | exp . GE exp
   57       | exp . AND exp
   58       | exp . OR exp

    PLUS    shift, and go to state 44
    MINUS   shift, and go to state 45
    TIMES   shift, and go to state 46
    DIVIDE  shift, and go to state 47
    EQ      shift, and go to state 48
    NEQ     shift, and go to state 49
    LT      shift, and go to state 50
    LE      shift, and go to state 51
    GT      shift, and go to state 52
    GE      shift, and go to state 53
    AND     shift, and go to state 54
    OR      shift, and go to state 55

    $default  reduce using rule 1 (program)


state 14

    2 exp: let .

    $default  reduce using rule 2 (exp)


state 15

    3 exp: lvalue .
    4    | lvalue . ASSIGN exp
   44 lvalue_not_id: lvalue . DOT ID

    DOT     shift, and go to state 56
    ASSIGN  shift, and go to state 57

    $default  reduce using rule 3 (exp)


state 16

   43 lvalue: lvalue_not_id .
   46 lvalue_not_id: lvalue_not_id . LBRACK exp RBRACK

    LBRACK  shift, and go to state 58

    $default  reduce using rule 43 (lvalue)


state 17

   10 exp: bin_op .

    $default  reduce using rule 10 (exp)


state 18

   11 exp: record .

    $default  reduce using rule 11 (exp)


state 19

   12 exp: array .

    $default  reduce using rule 12 (exp)


state 20

   13 exp: if_exp .

    $default  reduce using rule 13 (exp)


state 21

   14 exp: while_loop .

    $default  reduce using rule 14 (exp)


state 22

   15 exp: for_loop .

    $default  reduce using rule 15 (exp)


state 23

   17 exp: function_call .

    $default  reduce using rule 17 (exp)


state 24

   67 function_call: ID LPAREN . function_call_args RPAREN
   68              | ID LPAREN . RPAREN

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    RPAREN  shift, and go to state 59
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp                 go to state 60
    let                 go to state 14
    lvalue              go to state 15
    lvalue_not_id       go to state 16
    bin_op              go to state 17
    record              go to state 18
    array               go to state 19
    if_exp              go to state 20
    while_loop          go to state 21
    for_loop            go to state 22
    function_call       go to state 23
    function_call_args  go to state 61


state 25

   45 lvalue_not_id: ID LBRACK . exp RBRACK
   62 array: ID LBRACK . exp RBRACK OF exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 62
    let            go to state 14
    lvalue         go to state 15
    lvalue_not_id  go to state 16
    bin_op         go to state 17
    record         go to state 18
    array          go to state 19
    if_exp         go to state 20
    while_loop     go to state 21
    for_loop       go to state 22
    function_call  go to state 23


state 26

   59 record: ID LBRACE . record_args RBRACE

    ID  shift, and go to state 63

    record_args  go to state 64


state 27

   23 exp_list: error . SEMICOLON exp_list

    SEMICOLON  shift, and go to state 65


state 28

   22 exp_list: exp . SEMICOLON exp_list
   24         | exp .
   47 bin_op: exp . PLUS exp
   48       | exp . MINUS exp
   49       | exp . TIMES exp
   50       | exp . DIVIDE exp
   51       | exp . EQ exp
   52       | exp . NEQ exp
   53       | exp . LT exp
   54       | exp . GT exp
   55       | exp . LE exp
   56       | exp . GE exp
   57       | exp . AND exp
   58       | exp . OR exp

    SEMICOLON  shift, and go to state 66
    PLUS       shift, and go to state 44
    MINUS      shift, and go to state 45
    TIMES      shift, and go to state 46
    DIVIDE     shift, and go to state 47
    EQ         shift, and go to state 48
    NEQ        shift, and go to state 49
    LT         shift, and go to state 50
    LE         shift, and go to state 51
    GT         shift, and go to state 52
    GE         shift, and go to state 53
    AND        shift, and go to state 54
    OR         shift, and go to state 55

    $default  reduce using rule 24 (exp_list)


state 29

    5 exp: LPAREN exp_list . RPAREN

    RPAREN  shift, and go to state 67


state 30

    9 exp: MINUS exp .
   47 bin_op: exp . PLUS exp
   48       | exp . MINUS exp
   49       | exp . TIMES exp
   50       | exp . DIVIDE exp
   51       | exp . EQ exp
   52       | exp . NEQ exp
   53       | exp . LT exp
   54       | exp . GT exp
   55       | exp . LE exp
   56       | exp . GE exp
   57       | exp . AND exp
   58       | exp . OR exp

    $default  reduce using rule 9 (exp)


state 31

   47 bin_op: exp . PLUS exp
   48       | exp . MINUS exp
   49       | exp . TIMES exp
   50       | exp . DIVIDE exp
   51       | exp . EQ exp
   52       | exp . NEQ exp
   53       | exp . LT exp
   54       | exp . GT exp
   55       | exp . LE exp
   56       | exp . GE exp
   57       | exp . AND exp
   58       | exp . OR exp
   63 if_exp: IF exp . THEN exp
   64       | IF exp . THEN exp ELSE exp

    PLUS    shift, and go to state 44
    MINUS   shift, and go to state 45
    TIMES   shift, and go to state 46
    DIVIDE  shift, and go to state 47
    EQ      shift, and go to state 48
    NEQ     shift, and go to state 49
    LT      shift, and go to state 50
    LE      shift, and go to state 51
    GT      shift, and go to state 52
    GE      shift, and go to state 53
    AND     shift, and go to state 54
    OR      shift, and go to state 55
    THEN    shift, and go to state 68


state 32

   47 bin_op: exp . PLUS exp
   48       | exp . MINUS exp
   49       | exp . TIMES exp
   50       | exp . DIVIDE exp
   51       | exp . EQ exp
   52       | exp . NEQ exp
   53       | exp . LT exp
   54       | exp . GT exp
   55       | exp . LE exp
   56       | exp . GE exp
   57       | exp . AND exp
   58       | exp . OR exp
   65 while_loop: WHILE exp . DO exp

    PLUS    shift, and go to state 44
    MINUS   shift, and go to state 45
    TIMES   shift, and go to state 46
    DIVIDE  shift, and go to state 47
    EQ      shift, and go to state 48
    NEQ     shift, and go to state 49
    LT      shift, and go to state 50
    LE      shift, and go to state 51
    GT      shift, and go to state 52
    GE      shift, and go to state 53
    AND     shift, and go to state 54
    OR      shift, and go to state 55
    DO      shift, and go to state 69


state 33

   66 for_loop: FOR ID . ASSIGN exp TO exp DO exp

    ASSIGN  shift, and go to state 70


state 34

   20 decl_list: error . decl_list

    error     shift, and go to state 34
    FUNCTION  shift, and go to state 35
    VAR       shift, and go to state 36
    TYPE      shift, and go to state 37

    IN  reduce using rule 21 (decl_list)

    decl_list      go to state 71
    decl           go to state 39
    type_decl      go to state 40
    var_decl       go to state 41
    function_decl  go to state 42


state 35

   36 function_decl: FUNCTION . ID LPAREN function_args RPAREN COLON ID EQ exp
   37              | FUNCTION . ID LPAREN function_args RPAREN EQ exp

    ID  shift, and go to state 72


state 36

   34 var_decl: VAR . ID ASSIGN exp
   35         | VAR . ID COLON ID ASSIGN exp

    ID  shift, and go to state 73


state 37

   28 type_decl: TYPE . ID EQ type_id

    ID  shift, and go to state 74


state 38

   18 let: LET decl_list . IN exp_list END

    IN  shift, and go to state 75


state 39

   19 decl_list: decl . decl_list

    error     shift, and go to state 34
    FUNCTION  shift, and go to state 35
    VAR       shift, and go to state 36
    TYPE      shift, and go to state 37

    IN  reduce using rule 21 (decl_list)

    decl_list      go to state 76
    decl           go to state 39
    type_decl      go to state 40
    var_decl       go to state 41
    function_decl  go to state 42


state 40

   25 decl: type_decl .

    $default  reduce using rule 25 (decl)


state 41

   26 decl: var_decl .

    $default  reduce using rule 26 (decl)


state 42

   27 decl: function_decl .

    $default  reduce using rule 27 (decl)


state 43

    0 $accept: program $end .

    $default  accept


state 44

   47 bin_op: exp PLUS . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 77
    let            go to state 14
    lvalue         go to state 15
    lvalue_not_id  go to state 16
    bin_op         go to state 17
    record         go to state 18
    array          go to state 19
    if_exp         go to state 20
    while_loop     go to state 21
    for_loop       go to state 22
    function_call  go to state 23


state 45

   48 bin_op: exp MINUS . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 78
    let            go to state 14
    lvalue         go to state 15
    lvalue_not_id  go to state 16
    bin_op         go to state 17
    record         go to state 18
    array          go to state 19
    if_exp         go to state 20
    while_loop     go to state 21
    for_loop       go to state 22
    function_call  go to state 23


state 46

   49 bin_op: exp TIMES . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 79
    let            go to state 14
    lvalue         go to state 15
    lvalue_not_id  go to state 16
    bin_op         go to state 17
    record         go to state 18
    array          go to state 19
    if_exp         go to state 20
    while_loop     go to state 21
    for_loop       go to state 22
    function_call  go to state 23


state 47

   50 bin_op: exp DIVIDE . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 80
    let            go to state 14
    lvalue         go to state 15
    lvalue_not_id  go to state 16
    bin_op         go to state 17
    record         go to state 18
    array          go to state 19
    if_exp         go to state 20
    while_loop     go to state 21
    for_loop       go to state 22
    function_call  go to state 23


state 48

   51 bin_op: exp EQ . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 81
    let            go to state 14
    lvalue         go to state 15
    lvalue_not_id  go to state 16
    bin_op         go to state 17
    record         go to state 18
    array          go to state 19
    if_exp         go to state 20
    while_loop     go to state 21
    for_loop       go to state 22
    function_call  go to state 23


state 49

   52 bin_op: exp NEQ . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 82
    let            go to state 14
    lvalue         go to state 15
    lvalue_not_id  go to state 16
    bin_op         go to state 17
    record         go to state 18
    array          go to state 19
    if_exp         go to state 20
    while_loop     go to state 21
    for_loop       go to state 22
    function_call  go to state 23


state 50

   53 bin_op: exp LT . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 83
    let            go to state 14
    lvalue         go to state 15
    lvalue_not_id  go to state 16
    bin_op         go to state 17
    record         go to state 18
    array          go to state 19
    if_exp         go to state 20
    while_loop     go to state 21
    for_loop       go to state 22
    function_call  go to state 23


state 51

   55 bin_op: exp LE . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 84
    let            go to state 14
    lvalue         go to state 15
    lvalue_not_id  go to state 16
    bin_op         go to state 17
    record         go to state 18
    array          go to state 19
    if_exp         go to state 20
    while_loop     go to state 21
    for_loop       go to state 22
    function_call  go to state 23


state 52

   54 bin_op: exp GT . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 85
    let            go to state 14
    lvalue         go to state 15
    lvalue_not_id  go to state 16
    bin_op         go to state 17
    record         go to state 18
    array          go to state 19
    if_exp         go to state 20
    while_loop     go to state 21
    for_loop       go to state 22
    function_call  go to state 23


state 53

   56 bin_op: exp GE . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 86
    let            go to state 14
    lvalue         go to state 15
    lvalue_not_id  go to state 16
    bin_op         go to state 17
    record         go to state 18
    array          go to state 19
    if_exp         go to state 20
    while_loop     go to state 21
    for_loop       go to state 22
    function_call  go to state 23


state 54

   57 bin_op: exp AND . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 87
    let            go to state 14
    lvalue         go to state 15
    lvalue_not_id  go to state 16
    bin_op         go to state 17
    record         go to state 18
    array          go to state 19
    if_exp         go to state 20
    while_loop     go to state 21
    for_loop       go to state 22
    function_call  go to state 23


state 55

   58 bin_op: exp OR . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 88
    let            go to state 14
    lvalue         go to state 15
    lvalue_not_id  go to state 16
    bin_op         go to state 17
    record         go to state 18
    array          go to state 19
    if_exp         go to state 20
    while_loop     go to state 21
    for_loop       go to state 22
    function_call  go to state 23


state 56

   44 lvalue_not_id: lvalue DOT . ID

    ID  shift, and go to state 89


state 57

    4 exp: lvalue ASSIGN . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 90
    let            go to state 14
    lvalue         go to state 15
    lvalue_not_id  go to state 16
    bin_op         go to state 17
    record         go to state 18
    array          go to state 19
    if_exp         go to state 20
    while_loop     go to state 21
    for_loop       go to state 22
    function_call  go to state 23


state 58

   46 lvalue_not_id: lvalue_not_id LBRACK . exp RBRACK

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 91
    let            go to state 14
    lvalue         go to state 15
    lvalue_not_id  go to state 16
    bin_op         go to state 17
    record         go to state 18
    array          go to state 19
    if_exp         go to state 20
    while_loop     go to state 21
    for_loop       go to state 22
    function_call  go to state 23


state 59

   68 function_call: ID LPAREN RPAREN .

    $default  reduce using rule 68 (function_call)


state 60

   47 bin_op: exp . PLUS exp
   48       | exp . MINUS exp
   49       | exp . TIMES exp
   50       | exp . DIVIDE exp
   51       | exp . EQ exp
   52       | exp . NEQ exp
   53       | exp . LT exp
   54       | exp . GT exp
   55       | exp . LE exp
   56       | exp . GE exp
   57       | exp . AND exp
   58       | exp . OR exp
   69 function_call_args: exp . COMMA function_call_args
   70                   | exp .

    COMMA   shift, and go to state 92
    PLUS    shift, and go to state 44
    MINUS   shift, and go to state 45
    TIMES   shift, and go to state 46
    DIVIDE  shift, and go to state 47
    EQ      shift, and go to state 48
    NEQ     shift, and go to state 49
    LT      shift, and go to state 50
    LE      shift, and go to state 51
    GT      shift, and go to state 52
    GE      shift, and go to state 53
    AND     shift, and go to state 54
    OR      shift, and go to state 55

    $default  reduce using rule 70 (function_call_args)


state 61

   67 function_call: ID LPAREN function_call_args . RPAREN

    RPAREN  shift, and go to state 93


state 62

   45 lvalue_not_id: ID LBRACK exp . RBRACK
   47 bin_op: exp . PLUS exp
   48       | exp . MINUS exp
   49       | exp . TIMES exp
   50       | exp . DIVIDE exp
   51       | exp . EQ exp
   52       | exp . NEQ exp
   53       | exp . LT exp
   54       | exp . GT exp
   55       | exp . LE exp
   56       | exp . GE exp
   57       | exp . AND exp
   58       | exp . OR exp
   62 array: ID LBRACK exp . RBRACK OF exp

    RBRACK  shift, and go to state 94
    PLUS    shift, and go to state 44
    MINUS   shift, and go to state 45
    TIMES   shift, and go to state 46
    DIVIDE  shift, and go to state 47
    EQ      shift, and go to state 48
    NEQ     shift, and go to state 49
    LT      shift, and go to state 50
    LE      shift, and go to state 51
    GT      shift, and go to state 52
    GE      shift, and go to state 53
    AND     shift, and go to state 54
    OR      shift, and go to state 55


state 63

   60 record_args: ID . EQ exp COMMA record_args
   61            | ID . EQ exp

    EQ  shift, and go to state 95


state 64

   59 record: ID LBRACE record_args . RBRACE

    RBRACE  shift, and go to state 96


state 65

   23 exp_list: error SEMICOLON . exp_list

    error   shift, and go to state 27
    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 28
    let            go to state 14
    exp_list       go to state 97
    lvalue         go to state 15
    lvalue_not_id  go to state 16
    bin_op         go to state 17
    record         go to state 18
    array          go to state 19
    if_exp         go to state 20
    while_loop     go to state 21
    for_loop       go to state 22
    function_call  go to state 23


state 66

   22 exp_list: exp SEMICOLON . exp_list

    error   shift, and go to state 27
    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 28
    let            go to state 14
    exp_list       go to state 98
    lvalue         go to state 15
    lvalue_not_id  go to state 16
    bin_op         go to state 17
    record         go to state 18
    array          go to state 19
    if_exp         go to state 20
    while_loop     go to state 21
    for_loop       go to state 22
    function_call  go to state 23


state 67

    5 exp: LPAREN exp_list RPAREN .

    $default  reduce using rule 5 (exp)


state 68

   63 if_exp: IF exp THEN . exp
   64       | IF exp THEN . exp ELSE exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 99
    let            go to state 14
    lvalue         go to state 15
    lvalue_not_id  go to state 16
    bin_op         go to state 17
    record         go to state 18
    array          go to state 19
    if_exp         go to state 20
    while_loop     go to state 21
    for_loop       go to state 22
    function_call  go to state 23


state 69

   65 while_loop: WHILE exp DO . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 100
    let            go to state 14
    lvalue         go to state 15
    lvalue_not_id  go to state 16
    bin_op         go to state 17
    record         go to state 18
    array          go to state 19
    if_exp         go to state 20
    while_loop     go to state 21
    for_loop       go to state 22
    function_call  go to state 23


state 70

   66 for_loop: FOR ID ASSIGN . exp TO exp DO exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 101
    let            go to state 14
    lvalue         go to state 15
    lvalue_not_id  go to state 16
    bin_op         go to state 17
    record         go to state 18
    array          go to state 19
    if_exp         go to state 20
    while_loop     go to state 21
    for_loop       go to state 22
    function_call  go to state 23


state 71

   20 decl_list: error decl_list .

    $default  reduce using rule 20 (decl_list)


state 72

   36 function_decl: FUNCTION ID . LPAREN function_args RPAREN COLON ID EQ exp
   37              | FUNCTION ID . LPAREN function_args RPAREN EQ exp

    LPAREN  shift, and go to state 102


state 73

   34 var_decl: VAR ID . ASSIGN exp
   35         | VAR ID . COLON ID ASSIGN exp

    COLON   shift, and go to state 103
    ASSIGN  shift, and go to state 104


state 74

   28 type_decl: TYPE ID . EQ type_id

    EQ  shift, and go to state 105


state 75

   18 let: LET decl_list IN . exp_list END

    error   shift, and go to state 27
    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 28
    let            go to state 14
    exp_list       go to state 106
    lvalue         go to state 15
    lvalue_not_id  go to state 16
    bin_op         go to state 17
    record         go to state 18
    array          go to state 19
    if_exp         go to state 20
    while_loop     go to state 21
    for_loop       go to state 22
    function_call  go to state 23


state 76

   19 decl_list: decl decl_list .

    $default  reduce using rule 19 (decl_list)


state 77

   47 bin_op: exp . PLUS exp
   47       | exp PLUS exp .
   48       | exp . MINUS exp
   49       | exp . TIMES exp
   50       | exp . DIVIDE exp
   51       | exp . EQ exp
   52       | exp . NEQ exp
   53       | exp . LT exp
   54       | exp . GT exp
   55       | exp . LE exp
   56       | exp . GE exp
   57       | exp . AND exp
   58       | exp . OR exp

    TIMES   shift, and go to state 46
    DIVIDE  shift, and go to state 47

    $default  reduce using rule 47 (bin_op)


state 78

   47 bin_op: exp . PLUS exp
   48       | exp . MINUS exp
   48       | exp MINUS exp .
   49       | exp . TIMES exp
   50       | exp . DIVIDE exp
   51       | exp . EQ exp
   52       | exp . NEQ exp
   53       | exp . LT exp
   54       | exp . GT exp
   55       | exp . LE exp
   56       | exp . GE exp
   57       | exp . AND exp
   58       | exp . OR exp

    TIMES   shift, and go to state 46
    DIVIDE  shift, and go to state 47

    $default  reduce using rule 48 (bin_op)


state 79

   47 bin_op: exp . PLUS exp
   48       | exp . MINUS exp
   49       | exp . TIMES exp
   49       | exp TIMES exp .
   50       | exp . DIVIDE exp
   51       | exp . EQ exp
   52       | exp . NEQ exp
   53       | exp . LT exp
   54       | exp . GT exp
   55       | exp . LE exp
   56       | exp . GE exp
   57       | exp . AND exp
   58       | exp . OR exp

    $default  reduce using rule 49 (bin_op)


state 80

   47 bin_op: exp . PLUS exp
   48       | exp . MINUS exp
   49       | exp . TIMES exp
   50       | exp . DIVIDE exp
   50       | exp DIVIDE exp .
   51       | exp . EQ exp
   52       | exp . NEQ exp
   53       | exp . LT exp
   54       | exp . GT exp
   55       | exp . LE exp
   56       | exp . GE exp
   57       | exp . AND exp
   58       | exp . OR exp

    $default  reduce using rule 50 (bin_op)


state 81

   47 bin_op: exp . PLUS exp
   48       | exp . MINUS exp
   49       | exp . TIMES exp
   50       | exp . DIVIDE exp
   51       | exp . EQ exp
   51       | exp EQ exp .
   52       | exp . NEQ exp
   53       | exp . LT exp
   54       | exp . GT exp
   55       | exp . LE exp
   56       | exp . GE exp
   57       | exp . AND exp
   58       | exp . OR exp

    PLUS    shift, and go to state 44
    MINUS   shift, and go to state 45
    TIMES   shift, and go to state 46
    DIVIDE  shift, and go to state 47

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 51 (bin_op)


state 82

   47 bin_op: exp . PLUS exp
   48       | exp . MINUS exp
   49       | exp . TIMES exp
   50       | exp . DIVIDE exp
   51       | exp . EQ exp
   52       | exp . NEQ exp
   52       | exp NEQ exp .
   53       | exp . LT exp
   54       | exp . GT exp
   55       | exp . LE exp
   56       | exp . GE exp
   57       | exp . AND exp
   58       | exp . OR exp

    PLUS    shift, and go to state 44
    MINUS   shift, and go to state 45
    TIMES   shift, and go to state 46
    DIVIDE  shift, and go to state 47

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 52 (bin_op)


state 83

   47 bin_op: exp . PLUS exp
   48       | exp . MINUS exp
   49       | exp . TIMES exp
   50       | exp . DIVIDE exp
   51       | exp . EQ exp
   52       | exp . NEQ exp
   53       | exp . LT exp
   53       | exp LT exp .
   54       | exp . GT exp
   55       | exp . LE exp
   56       | exp . GE exp
   57       | exp . AND exp
   58       | exp . OR exp

    PLUS    shift, and go to state 44
    MINUS   shift, and go to state 45
    TIMES   shift, and go to state 46
    DIVIDE  shift, and go to state 47

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 53 (bin_op)


state 84

   47 bin_op: exp . PLUS exp
   48       | exp . MINUS exp
   49       | exp . TIMES exp
   50       | exp . DIVIDE exp
   51       | exp . EQ exp
   52       | exp . NEQ exp
   53       | exp . LT exp
   54       | exp . GT exp
   55       | exp . LE exp
   55       | exp LE exp .
   56       | exp . GE exp
   57       | exp . AND exp
   58       | exp . OR exp

    PLUS    shift, and go to state 44
    MINUS   shift, and go to state 45
    TIMES   shift, and go to state 46
    DIVIDE  shift, and go to state 47

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 55 (bin_op)


state 85

   47 bin_op: exp . PLUS exp
   48       | exp . MINUS exp
   49       | exp . TIMES exp
   50       | exp . DIVIDE exp
   51       | exp . EQ exp
   52       | exp . NEQ exp
   53       | exp . LT exp
   54       | exp . GT exp
   54       | exp GT exp .
   55       | exp . LE exp
   56       | exp . GE exp
   57       | exp . AND exp
   58       | exp . OR exp

    PLUS    shift, and go to state 44
    MINUS   shift, and go to state 45
    TIMES   shift, and go to state 46
    DIVIDE  shift, and go to state 47

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 54 (bin_op)


state 86

   47 bin_op: exp . PLUS exp
   48       | exp . MINUS exp
   49       | exp . TIMES exp
   50       | exp . DIVIDE exp
   51       | exp . EQ exp
   52       | exp . NEQ exp
   53       | exp . LT exp
   54       | exp . GT exp
   55       | exp . LE exp
   56       | exp . GE exp
   56       | exp GE exp .
   57       | exp . AND exp
   58       | exp . OR exp

    PLUS    shift, and go to state 44
    MINUS   shift, and go to state 45
    TIMES   shift, and go to state 46
    DIVIDE  shift, and go to state 47

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 56 (bin_op)


state 87

   47 bin_op: exp . PLUS exp
   48       | exp . MINUS exp
   49       | exp . TIMES exp
   50       | exp . DIVIDE exp
   51       | exp . EQ exp
   52       | exp . NEQ exp
   53       | exp . LT exp
   54       | exp . GT exp
   55       | exp . LE exp
   56       | exp . GE exp
   57       | exp . AND exp
   57       | exp AND exp .
   58       | exp . OR exp

    PLUS    shift, and go to state 44
    MINUS   shift, and go to state 45
    TIMES   shift, and go to state 46
    DIVIDE  shift, and go to state 47
    EQ      shift, and go to state 48
    NEQ     shift, and go to state 49
    LT      shift, and go to state 50
    LE      shift, and go to state 51
    GT      shift, and go to state 52
    GE      shift, and go to state 53

    $default  reduce using rule 57 (bin_op)


state 88

   47 bin_op: exp . PLUS exp
   48       | exp . MINUS exp
   49       | exp . TIMES exp
   50       | exp . DIVIDE exp
   51       | exp . EQ exp
   52       | exp . NEQ exp
   53       | exp . LT exp
   54       | exp . GT exp
   55       | exp . LE exp
   56       | exp . GE exp
   57       | exp . AND exp
   58       | exp . OR exp
   58       | exp OR exp .

    PLUS    shift, and go to state 44
    MINUS   shift, and go to state 45
    TIMES   shift, and go to state 46
    DIVIDE  shift, and go to state 47
    EQ      shift, and go to state 48
    NEQ     shift, and go to state 49
    LT      shift, and go to state 50
    LE      shift, and go to state 51
    GT      shift, and go to state 52
    GE      shift, and go to state 53

    $default  reduce using rule 58 (bin_op)


state 89

   44 lvalue_not_id: lvalue DOT ID .

    $default  reduce using rule 44 (lvalue_not_id)


state 90

    4 exp: lvalue ASSIGN exp .
   47 bin_op: exp . PLUS exp
   48       | exp . MINUS exp
   49       | exp . TIMES exp
   50       | exp . DIVIDE exp
   51       | exp . EQ exp
   52       | exp . NEQ exp
   53       | exp . LT exp
   54       | exp . GT exp
   55       | exp . LE exp
   56       | exp . GE exp
   57       | exp . AND exp
   58       | exp . OR exp

    PLUS    shift, and go to state 44
    MINUS   shift, and go to state 45
    TIMES   shift, and go to state 46
    DIVIDE  shift, and go to state 47
    EQ      shift, and go to state 48
    NEQ     shift, and go to state 49
    LT      shift, and go to state 50
    LE      shift, and go to state 51
    GT      shift, and go to state 52
    GE      shift, and go to state 53
    AND     shift, and go to state 54
    OR      shift, and go to state 55

    $default  reduce using rule 4 (exp)


state 91

   46 lvalue_not_id: lvalue_not_id LBRACK exp . RBRACK
   47 bin_op: exp . PLUS exp
   48       | exp . MINUS exp
   49       | exp . TIMES exp
   50       | exp . DIVIDE exp
   51       | exp . EQ exp
   52       | exp . NEQ exp
   53       | exp . LT exp
   54       | exp . GT exp
   55       | exp . LE exp
   56       | exp . GE exp
   57       | exp . AND exp
   58       | exp . OR exp

    RBRACK  shift, and go to state 107
    PLUS    shift, and go to state 44
    MINUS   shift, and go to state 45
    TIMES   shift, and go to state 46
    DIVIDE  shift, and go to state 47
    EQ      shift, and go to state 48
    NEQ     shift, and go to state 49
    LT      shift, and go to state 50
    LE      shift, and go to state 51
    GT      shift, and go to state 52
    GE      shift, and go to state 53
    AND     shift, and go to state 54
    OR      shift, and go to state 55


state 92

   69 function_call_args: exp COMMA . function_call_args

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp                 go to state 60
    let                 go to state 14
    lvalue              go to state 15
    lvalue_not_id       go to state 16
    bin_op              go to state 17
    record              go to state 18
    array               go to state 19
    if_exp              go to state 20
    while_loop          go to state 21
    for_loop            go to state 22
    function_call       go to state 23
    function_call_args  go to state 108


state 93

   67 function_call: ID LPAREN function_call_args RPAREN .

    $default  reduce using rule 67 (function_call)


state 94

   45 lvalue_not_id: ID LBRACK exp RBRACK .
   62 array: ID LBRACK exp RBRACK . OF exp

    OF  shift, and go to state 109

    $default  reduce using rule 45 (lvalue_not_id)


state 95

   60 record_args: ID EQ . exp COMMA record_args
   61            | ID EQ . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 110
    let            go to state 14
    lvalue         go to state 15
    lvalue_not_id  go to state 16
    bin_op         go to state 17
    record         go to state 18
    array          go to state 19
    if_exp         go to state 20
    while_loop     go to state 21
    for_loop       go to state 22
    function_call  go to state 23


state 96

   59 record: ID LBRACE record_args RBRACE .

    $default  reduce using rule 59 (record)


state 97

   23 exp_list: error SEMICOLON exp_list .

    $default  reduce using rule 23 (exp_list)


state 98

   22 exp_list: exp SEMICOLON exp_list .

    $default  reduce using rule 22 (exp_list)


state 99

   47 bin_op: exp . PLUS exp
   48       | exp . MINUS exp
   49       | exp . TIMES exp
   50       | exp . DIVIDE exp
   51       | exp . EQ exp
   52       | exp . NEQ exp
   53       | exp . LT exp
   54       | exp . GT exp
   55       | exp . LE exp
   56       | exp . GE exp
   57       | exp . AND exp
   58       | exp . OR exp
   63 if_exp: IF exp THEN exp .
   64       | IF exp THEN exp . ELSE exp

    ELSE  shift, and go to state 111

    $default  reduce using rule 63 (if_exp)


state 100

   47 bin_op: exp . PLUS exp
   48       | exp . MINUS exp
   49       | exp . TIMES exp
   50       | exp . DIVIDE exp
   51       | exp . EQ exp
   52       | exp . NEQ exp
   53       | exp . LT exp
   54       | exp . GT exp
   55       | exp . LE exp
   56       | exp . GE exp
   57       | exp . AND exp
   58       | exp . OR exp
   65 while_loop: WHILE exp DO exp .

    $default  reduce using rule 65 (while_loop)


state 101

   47 bin_op: exp . PLUS exp
   48       | exp . MINUS exp
   49       | exp . TIMES exp
   50       | exp . DIVIDE exp
   51       | exp . EQ exp
   52       | exp . NEQ exp
   53       | exp . LT exp
   54       | exp . GT exp
   55       | exp . LE exp
   56       | exp . GE exp
   57       | exp . AND exp
   58       | exp . OR exp
   66 for_loop: FOR ID ASSIGN exp . TO exp DO exp

    PLUS    shift, and go to state 44
    MINUS   shift, and go to state 45
    TIMES   shift, and go to state 46
    DIVIDE  shift, and go to state 47
    EQ      shift, and go to state 48
    NEQ     shift, and go to state 49
    LT      shift, and go to state 50
    LE      shift, and go to state 51
    GT      shift, and go to state 52
    GE      shift, and go to state 53
    AND     shift, and go to state 54
    OR      shift, and go to state 55
    TO      shift, and go to state 112


state 102

   36 function_decl: FUNCTION ID LPAREN . function_args RPAREN COLON ID EQ exp
   37              | FUNCTION ID LPAREN . function_args RPAREN EQ exp

    ID  shift, and go to state 113

    $default  reduce using rule 39 (function_args)

    function_args       go to state 114
    function_args_list  go to state 115


state 103

   35 var_decl: VAR ID COLON . ID ASSIGN exp

    ID  shift, and go to state 116


state 104

   34 var_decl: VAR ID ASSIGN . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 117
    let            go to state 14
    lvalue         go to state 15
    lvalue_not_id  go to state 16
    bin_op         go to state 17
    record         go to state 18
    array          go to state 19
    if_exp         go to state 20
    while_loop     go to state 21
    for_loop       go to state 22
    function_call  go to state 23


state 105

   28 type_decl: TYPE ID EQ . type_id

    ID      shift, and go to state 118
    LBRACE  shift, and go to state 119
    ARRAY   shift, and go to state 120

    type_id  go to state 121


state 106

   18 let: LET decl_list IN exp_list . END

    END  shift, and go to state 122


state 107

   46 lvalue_not_id: lvalue_not_id LBRACK exp RBRACK .

    $default  reduce using rule 46 (lvalue_not_id)


state 108

   69 function_call_args: exp COMMA function_call_args .

    $default  reduce using rule 69 (function_call_args)


state 109

   62 array: ID LBRACK exp RBRACK OF . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 123
    let            go to state 14
    lvalue         go to state 15
    lvalue_not_id  go to state 16
    bin_op         go to state 17
    record         go to state 18
    array          go to state 19
    if_exp         go to state 20
    while_loop     go to state 21
    for_loop       go to state 22
    function_call  go to state 23


state 110

   47 bin_op: exp . PLUS exp
   48       | exp . MINUS exp
   49       | exp . TIMES exp
   50       | exp . DIVIDE exp
   51       | exp . EQ exp
   52       | exp . NEQ exp
   53       | exp . LT exp
   54       | exp . GT exp
   55       | exp . LE exp
   56       | exp . GE exp
   57       | exp . AND exp
   58       | exp . OR exp
   60 record_args: ID EQ exp . COMMA record_args
   61            | ID EQ exp .

    COMMA   shift, and go to state 124
    PLUS    shift, and go to state 44
    MINUS   shift, and go to state 45
    TIMES   shift, and go to state 46
    DIVIDE  shift, and go to state 47
    EQ      shift, and go to state 48
    NEQ     shift, and go to state 49
    LT      shift, and go to state 50
    LE      shift, and go to state 51
    GT      shift, and go to state 52
    GE      shift, and go to state 53
    AND     shift, and go to state 54
    OR      shift, and go to state 55

    $default  reduce using rule 61 (record_args)


state 111

   64 if_exp: IF exp THEN exp ELSE . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 125
    let            go to state 14
    lvalue         go to state 15
    lvalue_not_id  go to state 16
    bin_op         go to state 17
    record         go to state 18
    array          go to state 19
    if_exp         go to state 20
    while_loop     go to state 21
    for_loop       go to state 22
    function_call  go to state 23


state 112

   66 for_loop: FOR ID ASSIGN exp TO . exp DO exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 126
    let            go to state 14
    lvalue         go to state 15
    lvalue_not_id  go to state 16
    bin_op         go to state 17
    record         go to state 18
    array          go to state 19
    if_exp         go to state 20
    while_loop     go to state 21
    for_loop       go to state 22
    function_call  go to state 23


state 113

   40 function_args_list: ID . COLON ID COMMA function_args_list
   41                   | ID . COLON ID

    COLON  shift, and go to state 127


state 114

   36 function_decl: FUNCTION ID LPAREN function_args . RPAREN COLON ID EQ exp
   37              | FUNCTION ID LPAREN function_args . RPAREN EQ exp

    RPAREN  shift, and go to state 128


state 115

   38 function_args: function_args_list .

    $default  reduce using rule 38 (function_args)


state 116

   35 var_decl: VAR ID COLON ID . ASSIGN exp

    ASSIGN  shift, and go to state 129


state 117

   34 var_decl: VAR ID ASSIGN exp .
   47 bin_op: exp . PLUS exp
   48       | exp . MINUS exp
   49       | exp . TIMES exp
   50       | exp . DIVIDE exp
   51       | exp . EQ exp
   52       | exp . NEQ exp
   53       | exp . LT exp
   54       | exp . GT exp
   55       | exp . LE exp
   56       | exp . GE exp
   57       | exp . AND exp
   58       | exp . OR exp

    PLUS    shift, and go to state 44
    MINUS   shift, and go to state 45
    TIMES   shift, and go to state 46
    DIVIDE  shift, and go to state 47
    EQ      shift, and go to state 48
    NEQ     shift, and go to state 49
    LT      shift, and go to state 50
    LE      shift, and go to state 51
    GT      shift, and go to state 52
    GE      shift, and go to state 53
    AND     shift, and go to state 54
    OR      shift, and go to state 55

    $default  reduce using rule 34 (var_decl)


state 118

   29 type_id: ID .

    $default  reduce using rule 29 (type_id)


state 119

   30 type_id: LBRACE . fields RBRACE

    ID  shift, and go to state 130

    fields  go to state 131


state 120

   31 type_id: ARRAY . OF ID

    OF  shift, and go to state 132


state 121

   28 type_decl: TYPE ID EQ type_id .

    $default  reduce using rule 28 (type_decl)


state 122

   18 let: LET decl_list IN exp_list END .

    $default  reduce using rule 18 (let)


state 123

   47 bin_op: exp . PLUS exp
   48       | exp . MINUS exp
   49       | exp . TIMES exp
   50       | exp . DIVIDE exp
   51       | exp . EQ exp
   52       | exp . NEQ exp
   53       | exp . LT exp
   54       | exp . GT exp
   55       | exp . LE exp
   56       | exp . GE exp
   57       | exp . AND exp
   58       | exp . OR exp
   62 array: ID LBRACK exp RBRACK OF exp .

    $default  reduce using rule 62 (array)


state 124

   60 record_args: ID EQ exp COMMA . record_args

    ID  shift, and go to state 63

    record_args  go to state 133


state 125

   47 bin_op: exp . PLUS exp
   48       | exp . MINUS exp
   49       | exp . TIMES exp
   50       | exp . DIVIDE exp
   51       | exp . EQ exp
   52       | exp . NEQ exp
   53       | exp . LT exp
   54       | exp . GT exp
   55       | exp . LE exp
   56       | exp . GE exp
   57       | exp . AND exp
   58       | exp . OR exp
   64 if_exp: IF exp THEN exp ELSE exp .

    $default  reduce using rule 64 (if_exp)


state 126

   47 bin_op: exp . PLUS exp
   48       | exp . MINUS exp
   49       | exp . TIMES exp
   50       | exp . DIVIDE exp
   51       | exp . EQ exp
   52       | exp . NEQ exp
   53       | exp . LT exp
   54       | exp . GT exp
   55       | exp . LE exp
   56       | exp . GE exp
   57       | exp . AND exp
   58       | exp . OR exp
   66 for_loop: FOR ID ASSIGN exp TO exp . DO exp

    PLUS    shift, and go to state 44
    MINUS   shift, and go to state 45
    TIMES   shift, and go to state 46
    DIVIDE  shift, and go to state 47
    EQ      shift, and go to state 48
    NEQ     shift, and go to state 49
    LT      shift, and go to state 50
    LE      shift, and go to state 51
    GT      shift, and go to state 52
    GE      shift, and go to state 53
    AND     shift, and go to state 54
    OR      shift, and go to state 55
    DO      shift, and go to state 134


state 127

   40 function_args_list: ID COLON . ID COMMA function_args_list
   41                   | ID COLON . ID

    ID  shift, and go to state 135


state 128

   36 function_decl: FUNCTION ID LPAREN function_args RPAREN . COLON ID EQ exp
   37              | FUNCTION ID LPAREN function_args RPAREN . EQ exp

    COLON  shift, and go to state 136
    EQ     shift, and go to state 137


state 129

   35 var_decl: VAR ID COLON ID ASSIGN . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 138
    let            go to state 14
    lvalue         go to state 15
    lvalue_not_id  go to state 16
    bin_op         go to state 17
    record         go to state 18
    array          go to state 19
    if_exp         go to state 20
    while_loop     go to state 21
    for_loop       go to state 22
    function_call  go to state 23


state 130

   32 fields: ID . COLON ID COMMA fields
   33       | ID . COLON ID

    COLON  shift, and go to state 139


state 131

   30 type_id: LBRACE fields . RBRACE

    RBRACE  shift, and go to state 140


state 132

   31 type_id: ARRAY OF . ID

    ID  shift, and go to state 141


state 133

   60 record_args: ID EQ exp COMMA record_args .

    $default  reduce using rule 60 (record_args)


state 134

   66 for_loop: FOR ID ASSIGN exp TO exp DO . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 142
    let            go to state 14
    lvalue         go to state 15
    lvalue_not_id  go to state 16
    bin_op         go to state 17
    record         go to state 18
    array          go to state 19
    if_exp         go to state 20
    while_loop     go to state 21
    for_loop       go to state 22
    function_call  go to state 23


state 135

   40 function_args_list: ID COLON ID . COMMA function_args_list
   41                   | ID COLON ID .

    COMMA  shift, and go to state 143

    $default  reduce using rule 41 (function_args_list)


state 136

   36 function_decl: FUNCTION ID LPAREN function_args RPAREN COLON . ID EQ exp

    ID  shift, and go to state 144


state 137

   37 function_decl: FUNCTION ID LPAREN function_args RPAREN EQ . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 145
    let            go to state 14
    lvalue         go to state 15
    lvalue_not_id  go to state 16
    bin_op         go to state 17
    record         go to state 18
    array          go to state 19
    if_exp         go to state 20
    while_loop     go to state 21
    for_loop       go to state 22
    function_call  go to state 23


state 138

   35 var_decl: VAR ID COLON ID ASSIGN exp .
   47 bin_op: exp . PLUS exp
   48       | exp . MINUS exp
   49       | exp . TIMES exp
   50       | exp . DIVIDE exp
   51       | exp . EQ exp
   52       | exp . NEQ exp
   53       | exp . LT exp
   54       | exp . GT exp
   55       | exp . LE exp
   56       | exp . GE exp
   57       | exp . AND exp
   58       | exp . OR exp

    PLUS    shift, and go to state 44
    MINUS   shift, and go to state 45
    TIMES   shift, and go to state 46
    DIVIDE  shift, and go to state 47
    EQ      shift, and go to state 48
    NEQ     shift, and go to state 49
    LT      shift, and go to state 50
    LE      shift, and go to state 51
    GT      shift, and go to state 52
    GE      shift, and go to state 53
    AND     shift, and go to state 54
    OR      shift, and go to state 55

    $default  reduce using rule 35 (var_decl)


state 139

   32 fields: ID COLON . ID COMMA fields
   33       | ID COLON . ID

    ID  shift, and go to state 146


state 140

   30 type_id: LBRACE fields RBRACE .

    $default  reduce using rule 30 (type_id)


state 141

   31 type_id: ARRAY OF ID .

    $default  reduce using rule 31 (type_id)


state 142

   47 bin_op: exp . PLUS exp
   48       | exp . MINUS exp
   49       | exp . TIMES exp
   50       | exp . DIVIDE exp
   51       | exp . EQ exp
   52       | exp . NEQ exp
   53       | exp . LT exp
   54       | exp . GT exp
   55       | exp . LE exp
   56       | exp . GE exp
   57       | exp . AND exp
   58       | exp . OR exp
   66 for_loop: FOR ID ASSIGN exp TO exp DO exp .

    $default  reduce using rule 66 (for_loop)


state 143

   40 function_args_list: ID COLON ID COMMA . function_args_list

    ID  shift, and go to state 113

    function_args_list  go to state 147


state 144

   36 function_decl: FUNCTION ID LPAREN function_args RPAREN COLON ID . EQ exp

    EQ  shift, and go to state 148


state 145

   37 function_decl: FUNCTION ID LPAREN function_args RPAREN EQ exp .
   47 bin_op: exp . PLUS exp
   48       | exp . MINUS exp
   49       | exp . TIMES exp
   50       | exp . DIVIDE exp
   51       | exp . EQ exp
   52       | exp . NEQ exp
   53       | exp . LT exp
   54       | exp . GT exp
   55       | exp . LE exp
   56       | exp . GE exp
   57       | exp . AND exp
   58       | exp . OR exp

    PLUS    shift, and go to state 44
    MINUS   shift, and go to state 45
    TIMES   shift, and go to state 46
    DIVIDE  shift, and go to state 47
    EQ      shift, and go to state 48
    NEQ     shift, and go to state 49
    LT      shift, and go to state 50
    LE      shift, and go to state 51
    GT      shift, and go to state 52
    GE      shift, and go to state 53
    AND     shift, and go to state 54
    OR      shift, and go to state 55

    $default  reduce using rule 37 (function_decl)


state 146

   32 fields: ID COLON ID . COMMA fields
   33       | ID COLON ID .

    COMMA  shift, and go to state 149

    $default  reduce using rule 33 (fields)


state 147

   40 function_args_list: ID COLON ID COMMA function_args_list .

    $default  reduce using rule 40 (function_args_list)


state 148

   36 function_decl: FUNCTION ID LPAREN function_args RPAREN COLON ID EQ . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp            go to state 150
    let            go to state 14
    lvalue         go to state 15
    lvalue_not_id  go to state 16
    bin_op         go to state 17
    record         go to state 18
    array          go to state 19
    if_exp         go to state 20
    while_loop     go to state 21
    for_loop       go to state 22
    function_call  go to state 23


state 149

   32 fields: ID COLON ID COMMA . fields

    ID  shift, and go to state 130

    fields  go to state 151


state 150

   36 function_decl: FUNCTION ID LPAREN function_args RPAREN COLON ID EQ exp .
   47 bin_op: exp . PLUS exp
   48       | exp . MINUS exp
   49       | exp . TIMES exp
   50       | exp . DIVIDE exp
   51       | exp . EQ exp
   52       | exp . NEQ exp
   53       | exp . LT exp
   54       | exp . GT exp
   55       | exp . LE exp
   56       | exp . GE exp
   57       | exp . AND exp
   58       | exp . OR exp

    PLUS    shift, and go to state 44
    MINUS   shift, and go to state 45
    TIMES   shift, and go to state 46
    DIVIDE  shift, and go to state 47
    EQ      shift, and go to state 48
    NEQ     shift, and go to state 49
    LT      shift, and go to state 50
    LE      shift, and go to state 51
    GT      shift, and go to state 52
    GE      shift, and go to state 53
    AND     shift, and go to state 54
    OR      shift, and go to state 55

    $default  reduce using rule 36 (function_decl)


state 151

   32 fields: ID COLON ID COMMA fields .

    $default  reduce using rule 32 (fields)
